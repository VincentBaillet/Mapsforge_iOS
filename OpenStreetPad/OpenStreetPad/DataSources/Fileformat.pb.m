// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Fileformat.pb.h"

@implementation FileformatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FileformatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Blob ()
@property (retain) NSData* raw;
@property int32_t rawSize;
@property (retain) NSData* zlibData;
@property (retain) NSData* lzmaData;
@property (retain) NSData* obsoleteBzip2Data;
@end

@implementation Blob

- (BOOL) hasRaw {
  return !!hasRaw_;
}
- (void) setHasRaw:(BOOL) value {
  hasRaw_ = !!value;
}
@synthesize raw;
- (BOOL) hasRawSize {
  return !!hasRawSize_;
}
- (void) setHasRawSize:(BOOL) value {
  hasRawSize_ = !!value;
}
@synthesize rawSize;
- (BOOL) hasZlibData {
  return !!hasZlibData_;
}
- (void) setHasZlibData:(BOOL) value {
  hasZlibData_ = !!value;
}
@synthesize zlibData;
- (BOOL) hasLzmaData {
  return !!hasLzmaData_;
}
- (void) setHasLzmaData:(BOOL) value {
  hasLzmaData_ = !!value;
}
@synthesize lzmaData;
- (BOOL) hasObsoleteBzip2Data {
  return !!hasObsoleteBzip2Data_;
}
- (void) setHasObsoleteBzip2Data:(BOOL) value {
  hasObsoleteBzip2Data_ = !!value;
}
@synthesize obsoleteBzip2Data;
- (void) dealloc {
  self.raw = nil;
  self.zlibData = nil;
  self.lzmaData = nil;
  self.obsoleteBzip2Data = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.raw = [NSData data];
    self.rawSize = 0;
    self.zlibData = [NSData data];
    self.lzmaData = [NSData data];
    self.obsoleteBzip2Data = [NSData data];
  }
  return self;
}
static Blob* defaultBlobInstance = nil;
+ (void) initialize {
  if (self == [Blob class]) {
    defaultBlobInstance = [[Blob alloc] init];
  }
}
+ (Blob*) defaultInstance {
  return defaultBlobInstance;
}
- (Blob*) defaultInstance {
  return defaultBlobInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRaw) {
    [output writeData:1 value:self.raw];
  }
  if (self.hasRawSize) {
    [output writeInt32:2 value:self.rawSize];
  }
  if (self.hasZlibData) {
    [output writeData:3 value:self.zlibData];
  }
  if (self.hasLzmaData) {
    [output writeData:4 value:self.lzmaData];
  }
  if (self.hasObsoleteBzip2Data) {
    [output writeData:5 value:self.obsoleteBzip2Data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRaw) {
    size += computeDataSize(1, self.raw);
  }
  if (self.hasRawSize) {
    size += computeInt32Size(2, self.rawSize);
  }
  if (self.hasZlibData) {
    size += computeDataSize(3, self.zlibData);
  }
  if (self.hasLzmaData) {
    size += computeDataSize(4, self.lzmaData);
  }
  if (self.hasObsoleteBzip2Data) {
    size += computeDataSize(5, self.obsoleteBzip2Data);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Blob*) parseFromData:(NSData*) data {
  return (Blob*)[[[Blob builder] mergeFromData:data] build];
}
+ (Blob*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Blob*)[[[Blob builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Blob*) parseFromInputStream:(NSInputStream*) input {
  return (Blob*)[[[Blob builder] mergeFromInputStream:input] build];
}
+ (Blob*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Blob*)[[[Blob builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Blob*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Blob*)[[[Blob builder] mergeFromCodedInputStream:input] build];
}
+ (Blob*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Blob*)[[[Blob builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Blob_Builder*) builder {
  return [[[Blob_Builder alloc] init] autorelease];
}
+ (Blob_Builder*) builderWithPrototype:(Blob*) prototype {
  return [[Blob builder] mergeFrom:prototype];
}
- (Blob_Builder*) builder {
  return [Blob builder];
}
@end

@interface Blob_Builder()
@property (retain) Blob* result;
@end

@implementation Blob_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Blob alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Blob_Builder*) clear {
  self.result = [[[Blob alloc] init] autorelease];
  return self;
}
- (Blob_Builder*) clone {
  return [Blob builderWithPrototype:result];
}
- (Blob*) defaultInstance {
  return [Blob defaultInstance];
}
- (Blob*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Blob*) buildPartial {
  Blob* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Blob_Builder*) mergeFrom:(Blob*) other {
  if (other == [Blob defaultInstance]) {
    return self;
  }
  if (other.hasRaw) {
    [self setRaw:other.raw];
  }
  if (other.hasRawSize) {
    [self setRawSize:other.rawSize];
  }
  if (other.hasZlibData) {
    [self setZlibData:other.zlibData];
  }
  if (other.hasLzmaData) {
    [self setLzmaData:other.lzmaData];
  }
  if (other.hasObsoleteBzip2Data) {
    [self setObsoleteBzip2Data:other.obsoleteBzip2Data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Blob_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Blob_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRaw:[input readData]];
        break;
      }
      case 16: {
        [self setRawSize:[input readInt32]];
        break;
      }
      case 26: {
        [self setZlibData:[input readData]];
        break;
      }
      case 34: {
        [self setLzmaData:[input readData]];
        break;
      }
      case 42: {
        [self setObsoleteBzip2Data:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRaw {
  return result.hasRaw;
}
- (NSData*) raw {
  return result.raw;
}
- (Blob_Builder*) setRaw:(NSData*) value {
  result.hasRaw = YES;
  result.raw = value;
  return self;
}
- (Blob_Builder*) clearRaw {
  result.hasRaw = NO;
  result.raw = [NSData data];
  return self;
}
- (BOOL) hasRawSize {
  return result.hasRawSize;
}
- (int32_t) rawSize {
  return result.rawSize;
}
- (Blob_Builder*) setRawSize:(int32_t) value {
  result.hasRawSize = YES;
  result.rawSize = value;
  return self;
}
- (Blob_Builder*) clearRawSize {
  result.hasRawSize = NO;
  result.rawSize = 0;
  return self;
}
- (BOOL) hasZlibData {
  return result.hasZlibData;
}
- (NSData*) zlibData {
  return result.zlibData;
}
- (Blob_Builder*) setZlibData:(NSData*) value {
  result.hasZlibData = YES;
  result.zlibData = value;
  return self;
}
- (Blob_Builder*) clearZlibData {
  result.hasZlibData = NO;
  result.zlibData = [NSData data];
  return self;
}
- (BOOL) hasLzmaData {
  return result.hasLzmaData;
}
- (NSData*) lzmaData {
  return result.lzmaData;
}
- (Blob_Builder*) setLzmaData:(NSData*) value {
  result.hasLzmaData = YES;
  result.lzmaData = value;
  return self;
}
- (Blob_Builder*) clearLzmaData {
  result.hasLzmaData = NO;
  result.lzmaData = [NSData data];
  return self;
}
- (BOOL) hasObsoleteBzip2Data {
  return result.hasObsoleteBzip2Data;
}
- (NSData*) obsoleteBzip2Data {
  return result.obsoleteBzip2Data;
}
- (Blob_Builder*) setObsoleteBzip2Data:(NSData*) value {
  result.hasObsoleteBzip2Data = YES;
  result.obsoleteBzip2Data = value;
  return self;
}
- (Blob_Builder*) clearObsoleteBzip2Data {
  result.hasObsoleteBzip2Data = NO;
  result.obsoleteBzip2Data = [NSData data];
  return self;
}
@end

@interface BlobHeader ()
@property (retain) NSString* type;
@property (retain) NSData* indexdata;
@property int32_t datasize;
@end

@implementation BlobHeader

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasIndexdata {
  return !!hasIndexdata_;
}
- (void) setHasIndexdata:(BOOL) value {
  hasIndexdata_ = !!value;
}
@synthesize indexdata;
- (BOOL) hasDatasize {
  return !!hasDatasize_;
}
- (void) setHasDatasize:(BOOL) value {
  hasDatasize_ = !!value;
}
@synthesize datasize;
- (void) dealloc {
  self.type = nil;
  self.indexdata = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = @"";
    self.indexdata = [NSData data];
    self.datasize = 0;
  }
  return self;
}
static BlobHeader* defaultBlobHeaderInstance = nil;
+ (void) initialize {
  if (self == [BlobHeader class]) {
    defaultBlobHeaderInstance = [[BlobHeader alloc] init];
  }
}
+ (BlobHeader*) defaultInstance {
  return defaultBlobHeaderInstance;
}
- (BlobHeader*) defaultInstance {
  return defaultBlobHeaderInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasDatasize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeString:1 value:self.type];
  }
  if (self.hasIndexdata) {
    [output writeData:2 value:self.indexdata];
  }
  if (self.hasDatasize) {
    [output writeInt32:3 value:self.datasize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeStringSize(1, self.type);
  }
  if (self.hasIndexdata) {
    size += computeDataSize(2, self.indexdata);
  }
  if (self.hasDatasize) {
    size += computeInt32Size(3, self.datasize);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BlobHeader*) parseFromData:(NSData*) data {
  return (BlobHeader*)[[[BlobHeader builder] mergeFromData:data] build];
}
+ (BlobHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BlobHeader*)[[[BlobHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BlobHeader*) parseFromInputStream:(NSInputStream*) input {
  return (BlobHeader*)[[[BlobHeader builder] mergeFromInputStream:input] build];
}
+ (BlobHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BlobHeader*)[[[BlobHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BlobHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BlobHeader*)[[[BlobHeader builder] mergeFromCodedInputStream:input] build];
}
+ (BlobHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BlobHeader*)[[[BlobHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BlobHeader_Builder*) builder {
  return [[[BlobHeader_Builder alloc] init] autorelease];
}
+ (BlobHeader_Builder*) builderWithPrototype:(BlobHeader*) prototype {
  return [[BlobHeader builder] mergeFrom:prototype];
}
- (BlobHeader_Builder*) builder {
  return [BlobHeader builder];
}
@end

@interface BlobHeader_Builder()
@property (retain) BlobHeader* result;
@end

@implementation BlobHeader_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BlobHeader alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BlobHeader_Builder*) clear {
  self.result = [[[BlobHeader alloc] init] autorelease];
  return self;
}
- (BlobHeader_Builder*) clone {
  return [BlobHeader builderWithPrototype:result];
}
- (BlobHeader*) defaultInstance {
  return [BlobHeader defaultInstance];
}
- (BlobHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BlobHeader*) buildPartial {
  BlobHeader* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BlobHeader_Builder*) mergeFrom:(BlobHeader*) other {
  if (other == [BlobHeader defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasIndexdata) {
    [self setIndexdata:other.indexdata];
  }
  if (other.hasDatasize) {
    [self setDatasize:other.datasize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BlobHeader_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BlobHeader_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setType:[input readString]];
        break;
      }
      case 18: {
        [self setIndexdata:[input readData]];
        break;
      }
      case 24: {
        [self setDatasize:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (BlobHeader_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (BlobHeader_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasIndexdata {
  return result.hasIndexdata;
}
- (NSData*) indexdata {
  return result.indexdata;
}
- (BlobHeader_Builder*) setIndexdata:(NSData*) value {
  result.hasIndexdata = YES;
  result.indexdata = value;
  return self;
}
- (BlobHeader_Builder*) clearIndexdata {
  result.hasIndexdata = NO;
  result.indexdata = [NSData data];
  return self;
}
- (BOOL) hasDatasize {
  return result.hasDatasize;
}
- (int32_t) datasize {
  return result.datasize;
}
- (BlobHeader_Builder*) setDatasize:(int32_t) value {
  result.hasDatasize = YES;
  result.datasize = value;
  return self;
}
- (BlobHeader_Builder*) clearDatasize {
  result.hasDatasize = NO;
  result.datasize = 0;
  return self;
}
@end

