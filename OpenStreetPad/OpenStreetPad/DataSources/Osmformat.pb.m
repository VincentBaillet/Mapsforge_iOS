// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Osmformat.pb.h"

@implementation OsmformatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [OsmformatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface HeaderBlock ()
@property (retain) HeaderBBox* bbox;
@property (retain) NSMutableArray* mutableRequiredFeaturesList;
@property (retain) NSMutableArray* mutableOptionalFeaturesList;
@property (retain) NSString* writingprogram;
@property (retain) NSString* source;
@end

@implementation HeaderBlock

- (BOOL) hasBbox {
  return !!hasBbox_;
}
- (void) setHasBbox:(BOOL) value {
  hasBbox_ = !!value;
}
@synthesize bbox;
@synthesize mutableRequiredFeaturesList;
@synthesize mutableOptionalFeaturesList;
- (BOOL) hasWritingprogram {
  return !!hasWritingprogram_;
}
- (void) setHasWritingprogram:(BOOL) value {
  hasWritingprogram_ = !!value;
}
@synthesize writingprogram;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value {
  hasSource_ = !!value;
}
@synthesize source;
- (void) dealloc {
  self.bbox = nil;
  self.mutableRequiredFeaturesList = nil;
  self.mutableOptionalFeaturesList = nil;
  self.writingprogram = nil;
  self.source = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.bbox = [HeaderBBox defaultInstance];
    self.writingprogram = @"";
    self.source = @"";
  }
  return self;
}
static HeaderBlock* defaultHeaderBlockInstance = nil;
+ (void) initialize {
  if (self == [HeaderBlock class]) {
    defaultHeaderBlockInstance = [[HeaderBlock alloc] init];
  }
}
+ (HeaderBlock*) defaultInstance {
  return defaultHeaderBlockInstance;
}
- (HeaderBlock*) defaultInstance {
  return defaultHeaderBlockInstance;
}
- (NSArray*) requiredFeaturesList {
  return mutableRequiredFeaturesList;
}
- (NSString*) requiredFeaturesAtIndex:(int32_t) index {
  id value = [mutableRequiredFeaturesList objectAtIndex:index];
  return value;
}
- (NSArray*) optionalFeaturesList {
  return mutableOptionalFeaturesList;
}
- (NSString*) optionalFeaturesAtIndex:(int32_t) index {
  id value = [mutableOptionalFeaturesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (self.hasBbox) {
    if (!self.bbox.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBbox) {
    [output writeMessage:1 value:self.bbox];
  }
  for (NSString* element in self.mutableRequiredFeaturesList) {
    [output writeString:4 value:element];
  }
  for (NSString* element in self.mutableOptionalFeaturesList) {
    [output writeString:5 value:element];
  }
  if (self.hasWritingprogram) {
    [output writeString:16 value:self.writingprogram];
  }
  if (self.hasSource) {
    [output writeString:17 value:self.source];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBbox) {
    size += computeMessageSize(1, self.bbox);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableRequiredFeaturesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableRequiredFeaturesList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableOptionalFeaturesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableOptionalFeaturesList.count;
  }
  if (self.hasWritingprogram) {
    size += computeStringSize(16, self.writingprogram);
  }
  if (self.hasSource) {
    size += computeStringSize(17, self.source);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HeaderBlock*) parseFromData:(NSData*) data {
  return (HeaderBlock*)[[[HeaderBlock builder] mergeFromData:data] build];
}
+ (HeaderBlock*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderBlock*)[[[HeaderBlock builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HeaderBlock*) parseFromInputStream:(NSInputStream*) input {
  return (HeaderBlock*)[[[HeaderBlock builder] mergeFromInputStream:input] build];
}
+ (HeaderBlock*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderBlock*)[[[HeaderBlock builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBlock*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HeaderBlock*)[[[HeaderBlock builder] mergeFromCodedInputStream:input] build];
}
+ (HeaderBlock*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderBlock*)[[[HeaderBlock builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBlock_Builder*) builder {
  return [[[HeaderBlock_Builder alloc] init] autorelease];
}
+ (HeaderBlock_Builder*) builderWithPrototype:(HeaderBlock*) prototype {
  return [[HeaderBlock builder] mergeFrom:prototype];
}
- (HeaderBlock_Builder*) builder {
  return [HeaderBlock builder];
}
@end

@interface HeaderBlock_Builder()
@property (retain) HeaderBlock* result;
@end

@implementation HeaderBlock_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HeaderBlock alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HeaderBlock_Builder*) clear {
  self.result = [[[HeaderBlock alloc] init] autorelease];
  return self;
}
- (HeaderBlock_Builder*) clone {
  return [HeaderBlock builderWithPrototype:result];
}
- (HeaderBlock*) defaultInstance {
  return [HeaderBlock defaultInstance];
}
- (HeaderBlock*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HeaderBlock*) buildPartial {
  HeaderBlock* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HeaderBlock_Builder*) mergeFrom:(HeaderBlock*) other {
  if (other == [HeaderBlock defaultInstance]) {
    return self;
  }
  if (other.hasBbox) {
    [self mergeBbox:other.bbox];
  }
  if (other.mutableRequiredFeaturesList.count > 0) {
    if (result.mutableRequiredFeaturesList == nil) {
      result.mutableRequiredFeaturesList = [NSMutableArray array];
    }
    [result.mutableRequiredFeaturesList addObjectsFromArray:other.mutableRequiredFeaturesList];
  }
  if (other.mutableOptionalFeaturesList.count > 0) {
    if (result.mutableOptionalFeaturesList == nil) {
      result.mutableOptionalFeaturesList = [NSMutableArray array];
    }
    [result.mutableOptionalFeaturesList addObjectsFromArray:other.mutableOptionalFeaturesList];
  }
  if (other.hasWritingprogram) {
    [self setWritingprogram:other.writingprogram];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeaderBlock_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeaderBlock_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        HeaderBBox_Builder* subBuilder = [HeaderBBox builder];
        if (self.hasBbox) {
          [subBuilder mergeFrom:self.bbox];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBbox:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self addRequiredFeatures:[input readString]];
        break;
      }
      case 42: {
        [self addOptionalFeatures:[input readString]];
        break;
      }
      case 130: {
        [self setWritingprogram:[input readString]];
        break;
      }
      case 138: {
        [self setSource:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBbox {
  return result.hasBbox;
}
- (HeaderBBox*) bbox {
  return result.bbox;
}
- (HeaderBlock_Builder*) setBbox:(HeaderBBox*) value {
  result.hasBbox = YES;
  result.bbox = value;
  return self;
}
- (HeaderBlock_Builder*) setBboxBuilder:(HeaderBBox_Builder*) builderForValue {
  return [self setBbox:[builderForValue build]];
}
- (HeaderBlock_Builder*) mergeBbox:(HeaderBBox*) value {
  if (result.hasBbox &&
      result.bbox != [HeaderBBox defaultInstance]) {
    result.bbox =
      [[[HeaderBBox builderWithPrototype:result.bbox] mergeFrom:value] buildPartial];
  } else {
    result.bbox = value;
  }
  result.hasBbox = YES;
  return self;
}
- (HeaderBlock_Builder*) clearBbox {
  result.hasBbox = NO;
  result.bbox = [HeaderBBox defaultInstance];
  return self;
}
- (NSArray*) requiredFeaturesList {
  if (result.mutableRequiredFeaturesList == nil) {
    return [NSArray array];
  }
  return result.mutableRequiredFeaturesList;
}
- (NSString*) requiredFeaturesAtIndex:(int32_t) index {
  return [result requiredFeaturesAtIndex:index];
}
- (HeaderBlock_Builder*) replaceRequiredFeaturesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableRequiredFeaturesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (HeaderBlock_Builder*) addRequiredFeatures:(NSString*) value {
  if (result.mutableRequiredFeaturesList == nil) {
    result.mutableRequiredFeaturesList = [NSMutableArray array];
  }
  [result.mutableRequiredFeaturesList addObject:value];
  return self;
}
- (HeaderBlock_Builder*) addAllRequiredFeatures:(NSArray*) values {
  if (result.mutableRequiredFeaturesList == nil) {
    result.mutableRequiredFeaturesList = [NSMutableArray array];
  }
  [result.mutableRequiredFeaturesList addObjectsFromArray:values];
  return self;
}
- (HeaderBlock_Builder*) clearRequiredFeaturesList {
  result.mutableRequiredFeaturesList = nil;
  return self;
}
- (NSArray*) optionalFeaturesList {
  if (result.mutableOptionalFeaturesList == nil) {
    return [NSArray array];
  }
  return result.mutableOptionalFeaturesList;
}
- (NSString*) optionalFeaturesAtIndex:(int32_t) index {
  return [result optionalFeaturesAtIndex:index];
}
- (HeaderBlock_Builder*) replaceOptionalFeaturesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableOptionalFeaturesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (HeaderBlock_Builder*) addOptionalFeatures:(NSString*) value {
  if (result.mutableOptionalFeaturesList == nil) {
    result.mutableOptionalFeaturesList = [NSMutableArray array];
  }
  [result.mutableOptionalFeaturesList addObject:value];
  return self;
}
- (HeaderBlock_Builder*) addAllOptionalFeatures:(NSArray*) values {
  if (result.mutableOptionalFeaturesList == nil) {
    result.mutableOptionalFeaturesList = [NSMutableArray array];
  }
  [result.mutableOptionalFeaturesList addObjectsFromArray:values];
  return self;
}
- (HeaderBlock_Builder*) clearOptionalFeaturesList {
  result.mutableOptionalFeaturesList = nil;
  return self;
}
- (BOOL) hasWritingprogram {
  return result.hasWritingprogram;
}
- (NSString*) writingprogram {
  return result.writingprogram;
}
- (HeaderBlock_Builder*) setWritingprogram:(NSString*) value {
  result.hasWritingprogram = YES;
  result.writingprogram = value;
  return self;
}
- (HeaderBlock_Builder*) clearWritingprogram {
  result.hasWritingprogram = NO;
  result.writingprogram = @"";
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (NSString*) source {
  return result.source;
}
- (HeaderBlock_Builder*) setSource:(NSString*) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (HeaderBlock_Builder*) clearSource {
  result.hasSource = NO;
  result.source = @"";
  return self;
}
@end

@interface HeaderBBox ()
@property int64_t left;
@property int64_t right;
@property int64_t top;
@property int64_t bottom;
@end

@implementation HeaderBBox

- (BOOL) hasLeft {
  return !!hasLeft_;
}
- (void) setHasLeft:(BOOL) value {
  hasLeft_ = !!value;
}
@synthesize left;
- (BOOL) hasRight {
  return !!hasRight_;
}
- (void) setHasRight:(BOOL) value {
  hasRight_ = !!value;
}
@synthesize right;
- (BOOL) hasTop {
  return !!hasTop_;
}
- (void) setHasTop:(BOOL) value {
  hasTop_ = !!value;
}
@synthesize top;
- (BOOL) hasBottom {
  return !!hasBottom_;
}
- (void) setHasBottom:(BOOL) value {
  hasBottom_ = !!value;
}
@synthesize bottom;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.left = 0L;
    self.right = 0L;
    self.top = 0L;
    self.bottom = 0L;
  }
  return self;
}
static HeaderBBox* defaultHeaderBBoxInstance = nil;
+ (void) initialize {
  if (self == [HeaderBBox class]) {
    defaultHeaderBBoxInstance = [[HeaderBBox alloc] init];
  }
}
+ (HeaderBBox*) defaultInstance {
  return defaultHeaderBBoxInstance;
}
- (HeaderBBox*) defaultInstance {
  return defaultHeaderBBoxInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLeft) {
    return NO;
  }
  if (!self.hasRight) {
    return NO;
  }
  if (!self.hasTop) {
    return NO;
  }
  if (!self.hasBottom) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLeft) {
    [output writeSInt64:1 value:self.left];
  }
  if (self.hasRight) {
    [output writeSInt64:2 value:self.right];
  }
  if (self.hasTop) {
    [output writeSInt64:3 value:self.top];
  }
  if (self.hasBottom) {
    [output writeSInt64:4 value:self.bottom];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLeft) {
    size += computeSInt64Size(1, self.left);
  }
  if (self.hasRight) {
    size += computeSInt64Size(2, self.right);
  }
  if (self.hasTop) {
    size += computeSInt64Size(3, self.top);
  }
  if (self.hasBottom) {
    size += computeSInt64Size(4, self.bottom);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (HeaderBBox*) parseFromData:(NSData*) data {
  return (HeaderBBox*)[[[HeaderBBox builder] mergeFromData:data] build];
}
+ (HeaderBBox*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderBBox*)[[[HeaderBBox builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HeaderBBox*) parseFromInputStream:(NSInputStream*) input {
  return (HeaderBBox*)[[[HeaderBBox builder] mergeFromInputStream:input] build];
}
+ (HeaderBBox*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderBBox*)[[[HeaderBBox builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBBox*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HeaderBBox*)[[[HeaderBBox builder] mergeFromCodedInputStream:input] build];
}
+ (HeaderBBox*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeaderBBox*)[[[HeaderBBox builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBBox_Builder*) builder {
  return [[[HeaderBBox_Builder alloc] init] autorelease];
}
+ (HeaderBBox_Builder*) builderWithPrototype:(HeaderBBox*) prototype {
  return [[HeaderBBox builder] mergeFrom:prototype];
}
- (HeaderBBox_Builder*) builder {
  return [HeaderBBox builder];
}
@end

@interface HeaderBBox_Builder()
@property (retain) HeaderBBox* result;
@end

@implementation HeaderBBox_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HeaderBBox alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HeaderBBox_Builder*) clear {
  self.result = [[[HeaderBBox alloc] init] autorelease];
  return self;
}
- (HeaderBBox_Builder*) clone {
  return [HeaderBBox builderWithPrototype:result];
}
- (HeaderBBox*) defaultInstance {
  return [HeaderBBox defaultInstance];
}
- (HeaderBBox*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HeaderBBox*) buildPartial {
  HeaderBBox* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HeaderBBox_Builder*) mergeFrom:(HeaderBBox*) other {
  if (other == [HeaderBBox defaultInstance]) {
    return self;
  }
  if (other.hasLeft) {
    [self setLeft:other.left];
  }
  if (other.hasRight) {
    [self setRight:other.right];
  }
  if (other.hasTop) {
    [self setTop:other.top];
  }
  if (other.hasBottom) {
    [self setBottom:other.bottom];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeaderBBox_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeaderBBox_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLeft:[input readSInt64]];
        break;
      }
      case 16: {
        [self setRight:[input readSInt64]];
        break;
      }
      case 24: {
        [self setTop:[input readSInt64]];
        break;
      }
      case 32: {
        [self setBottom:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasLeft {
  return result.hasLeft;
}
- (int64_t) left {
  return result.left;
}
- (HeaderBBox_Builder*) setLeft:(int64_t) value {
  result.hasLeft = YES;
  result.left = value;
  return self;
}
- (HeaderBBox_Builder*) clearLeft {
  result.hasLeft = NO;
  result.left = 0L;
  return self;
}
- (BOOL) hasRight {
  return result.hasRight;
}
- (int64_t) right {
  return result.right;
}
- (HeaderBBox_Builder*) setRight:(int64_t) value {
  result.hasRight = YES;
  result.right = value;
  return self;
}
- (HeaderBBox_Builder*) clearRight {
  result.hasRight = NO;
  result.right = 0L;
  return self;
}
- (BOOL) hasTop {
  return result.hasTop;
}
- (int64_t) top {
  return result.top;
}
- (HeaderBBox_Builder*) setTop:(int64_t) value {
  result.hasTop = YES;
  result.top = value;
  return self;
}
- (HeaderBBox_Builder*) clearTop {
  result.hasTop = NO;
  result.top = 0L;
  return self;
}
- (BOOL) hasBottom {
  return result.hasBottom;
}
- (int64_t) bottom {
  return result.bottom;
}
- (HeaderBBox_Builder*) setBottom:(int64_t) value {
  result.hasBottom = YES;
  result.bottom = value;
  return self;
}
- (HeaderBBox_Builder*) clearBottom {
  result.hasBottom = NO;
  result.bottom = 0L;
  return self;
}
@end

@interface PrimitiveBlock ()
@property (retain) StringTable* stringtable;
@property (retain) NSMutableArray* mutablePrimitivegroupList;
@property int32_t granularity;
@property int64_t latOffset;
@property int64_t lonOffset;
@property int32_t dateGranularity;
@end

@implementation PrimitiveBlock

- (BOOL) hasStringtable {
  return !!hasStringtable_;
}
- (void) setHasStringtable:(BOOL) value {
  hasStringtable_ = !!value;
}
@synthesize stringtable;
@synthesize mutablePrimitivegroupList;
- (BOOL) hasGranularity {
  return !!hasGranularity_;
}
- (void) setHasGranularity:(BOOL) value {
  hasGranularity_ = !!value;
}
@synthesize granularity;
- (BOOL) hasLatOffset {
  return !!hasLatOffset_;
}
- (void) setHasLatOffset:(BOOL) value {
  hasLatOffset_ = !!value;
}
@synthesize latOffset;
- (BOOL) hasLonOffset {
  return !!hasLonOffset_;
}
- (void) setHasLonOffset:(BOOL) value {
  hasLonOffset_ = !!value;
}
@synthesize lonOffset;
- (BOOL) hasDateGranularity {
  return !!hasDateGranularity_;
}
- (void) setHasDateGranularity:(BOOL) value {
  hasDateGranularity_ = !!value;
}
@synthesize dateGranularity;
- (void) dealloc {
  self.stringtable = nil;
  self.mutablePrimitivegroupList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.stringtable = [StringTable defaultInstance];
    self.granularity = 100;
    self.latOffset = 0L;
    self.lonOffset = 0L;
    self.dateGranularity = 1000;
  }
  return self;
}
static PrimitiveBlock* defaultPrimitiveBlockInstance = nil;
+ (void) initialize {
  if (self == [PrimitiveBlock class]) {
    defaultPrimitiveBlockInstance = [[PrimitiveBlock alloc] init];
  }
}
+ (PrimitiveBlock*) defaultInstance {
  return defaultPrimitiveBlockInstance;
}
- (PrimitiveBlock*) defaultInstance {
  return defaultPrimitiveBlockInstance;
}
- (NSArray*) primitivegroupList {
  return mutablePrimitivegroupList;
}
- (PrimitiveGroup*) primitivegroupAtIndex:(int32_t) index {
  id value = [mutablePrimitivegroupList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasStringtable) {
    return NO;
  }
  for (PrimitiveGroup* element in self.primitivegroupList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStringtable) {
    [output writeMessage:1 value:self.stringtable];
  }
  for (PrimitiveGroup* element in self.primitivegroupList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasGranularity) {
    [output writeInt32:17 value:self.granularity];
  }
  if (self.hasDateGranularity) {
    [output writeInt32:18 value:self.dateGranularity];
  }
  if (self.hasLatOffset) {
    [output writeInt64:19 value:self.latOffset];
  }
  if (self.hasLonOffset) {
    [output writeInt64:20 value:self.lonOffset];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasStringtable) {
    size += computeMessageSize(1, self.stringtable);
  }
  for (PrimitiveGroup* element in self.primitivegroupList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasGranularity) {
    size += computeInt32Size(17, self.granularity);
  }
  if (self.hasDateGranularity) {
    size += computeInt32Size(18, self.dateGranularity);
  }
  if (self.hasLatOffset) {
    size += computeInt64Size(19, self.latOffset);
  }
  if (self.hasLonOffset) {
    size += computeInt64Size(20, self.lonOffset);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PrimitiveBlock*) parseFromData:(NSData*) data {
  return (PrimitiveBlock*)[[[PrimitiveBlock builder] mergeFromData:data] build];
}
+ (PrimitiveBlock*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PrimitiveBlock*)[[[PrimitiveBlock builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PrimitiveBlock*) parseFromInputStream:(NSInputStream*) input {
  return (PrimitiveBlock*)[[[PrimitiveBlock builder] mergeFromInputStream:input] build];
}
+ (PrimitiveBlock*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PrimitiveBlock*)[[[PrimitiveBlock builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PrimitiveBlock*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PrimitiveBlock*)[[[PrimitiveBlock builder] mergeFromCodedInputStream:input] build];
}
+ (PrimitiveBlock*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PrimitiveBlock*)[[[PrimitiveBlock builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PrimitiveBlock_Builder*) builder {
  return [[[PrimitiveBlock_Builder alloc] init] autorelease];
}
+ (PrimitiveBlock_Builder*) builderWithPrototype:(PrimitiveBlock*) prototype {
  return [[PrimitiveBlock builder] mergeFrom:prototype];
}
- (PrimitiveBlock_Builder*) builder {
  return [PrimitiveBlock builder];
}
@end

@interface PrimitiveBlock_Builder()
@property (retain) PrimitiveBlock* result;
@end

@implementation PrimitiveBlock_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PrimitiveBlock alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PrimitiveBlock_Builder*) clear {
  self.result = [[[PrimitiveBlock alloc] init] autorelease];
  return self;
}
- (PrimitiveBlock_Builder*) clone {
  return [PrimitiveBlock builderWithPrototype:result];
}
- (PrimitiveBlock*) defaultInstance {
  return [PrimitiveBlock defaultInstance];
}
- (PrimitiveBlock*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PrimitiveBlock*) buildPartial {
  PrimitiveBlock* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PrimitiveBlock_Builder*) mergeFrom:(PrimitiveBlock*) other {
  if (other == [PrimitiveBlock defaultInstance]) {
    return self;
  }
  if (other.hasStringtable) {
    [self mergeStringtable:other.stringtable];
  }
  if (other.mutablePrimitivegroupList.count > 0) {
    if (result.mutablePrimitivegroupList == nil) {
      result.mutablePrimitivegroupList = [NSMutableArray array];
    }
    [result.mutablePrimitivegroupList addObjectsFromArray:other.mutablePrimitivegroupList];
  }
  if (other.hasGranularity) {
    [self setGranularity:other.granularity];
  }
  if (other.hasLatOffset) {
    [self setLatOffset:other.latOffset];
  }
  if (other.hasLonOffset) {
    [self setLonOffset:other.lonOffset];
  }
  if (other.hasDateGranularity) {
    [self setDateGranularity:other.dateGranularity];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PrimitiveBlock_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PrimitiveBlock_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        StringTable_Builder* subBuilder = [StringTable builder];
        if (self.hasStringtable) {
          [subBuilder mergeFrom:self.stringtable];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStringtable:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PrimitiveGroup_Builder* subBuilder = [PrimitiveGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPrimitivegroup:[subBuilder buildPartial]];
        break;
      }
      case 136: {
        [self setGranularity:[input readInt32]];
        break;
      }
      case 144: {
        [self setDateGranularity:[input readInt32]];
        break;
      }
      case 152: {
        [self setLatOffset:[input readInt64]];
        break;
      }
      case 160: {
        [self setLonOffset:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasStringtable {
  return result.hasStringtable;
}
- (StringTable*) stringtable {
  return result.stringtable;
}
- (PrimitiveBlock_Builder*) setStringtable:(StringTable*) value {
  result.hasStringtable = YES;
  result.stringtable = value;
  return self;
}
- (PrimitiveBlock_Builder*) setStringtableBuilder:(StringTable_Builder*) builderForValue {
  return [self setStringtable:[builderForValue build]];
}
- (PrimitiveBlock_Builder*) mergeStringtable:(StringTable*) value {
  if (result.hasStringtable &&
      result.stringtable != [StringTable defaultInstance]) {
    result.stringtable =
      [[[StringTable builderWithPrototype:result.stringtable] mergeFrom:value] buildPartial];
  } else {
    result.stringtable = value;
  }
  result.hasStringtable = YES;
  return self;
}
- (PrimitiveBlock_Builder*) clearStringtable {
  result.hasStringtable = NO;
  result.stringtable = [StringTable defaultInstance];
  return self;
}
- (NSArray*) primitivegroupList {
  if (result.mutablePrimitivegroupList == nil) { return [NSArray array]; }
  return result.mutablePrimitivegroupList;
}
- (PrimitiveGroup*) primitivegroupAtIndex:(int32_t) index {
  return [result primitivegroupAtIndex:index];
}
- (PrimitiveBlock_Builder*) replacePrimitivegroupAtIndex:(int32_t) index with:(PrimitiveGroup*) value {
  [result.mutablePrimitivegroupList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PrimitiveBlock_Builder*) addAllPrimitivegroup:(NSArray*) values {
  if (result.mutablePrimitivegroupList == nil) {
    result.mutablePrimitivegroupList = [NSMutableArray array];
  }
  [result.mutablePrimitivegroupList addObjectsFromArray:values];
  return self;
}
- (PrimitiveBlock_Builder*) clearPrimitivegroupList {
  result.mutablePrimitivegroupList = nil;
  return self;
}
- (PrimitiveBlock_Builder*) addPrimitivegroup:(PrimitiveGroup*) value {
  if (result.mutablePrimitivegroupList == nil) {
    result.mutablePrimitivegroupList = [NSMutableArray array];
  }
  [result.mutablePrimitivegroupList addObject:value];
  return self;
}
- (BOOL) hasGranularity {
  return result.hasGranularity;
}
- (int32_t) granularity {
  return result.granularity;
}
- (PrimitiveBlock_Builder*) setGranularity:(int32_t) value {
  result.hasGranularity = YES;
  result.granularity = value;
  return self;
}
- (PrimitiveBlock_Builder*) clearGranularity {
  result.hasGranularity = NO;
  result.granularity = 100;
  return self;
}
- (BOOL) hasLatOffset {
  return result.hasLatOffset;
}
- (int64_t) latOffset {
  return result.latOffset;
}
- (PrimitiveBlock_Builder*) setLatOffset:(int64_t) value {
  result.hasLatOffset = YES;
  result.latOffset = value;
  return self;
}
- (PrimitiveBlock_Builder*) clearLatOffset {
  result.hasLatOffset = NO;
  result.latOffset = 0L;
  return self;
}
- (BOOL) hasLonOffset {
  return result.hasLonOffset;
}
- (int64_t) lonOffset {
  return result.lonOffset;
}
- (PrimitiveBlock_Builder*) setLonOffset:(int64_t) value {
  result.hasLonOffset = YES;
  result.lonOffset = value;
  return self;
}
- (PrimitiveBlock_Builder*) clearLonOffset {
  result.hasLonOffset = NO;
  result.lonOffset = 0L;
  return self;
}
- (BOOL) hasDateGranularity {
  return result.hasDateGranularity;
}
- (int32_t) dateGranularity {
  return result.dateGranularity;
}
- (PrimitiveBlock_Builder*) setDateGranularity:(int32_t) value {
  result.hasDateGranularity = YES;
  result.dateGranularity = value;
  return self;
}
- (PrimitiveBlock_Builder*) clearDateGranularity {
  result.hasDateGranularity = NO;
  result.dateGranularity = 1000;
  return self;
}
@end

@interface PrimitiveGroup ()
@property (retain) NSMutableArray* mutableNodesList;
@property (retain) DenseNodes* dense;
@property (retain) NSMutableArray* mutableWaysList;
@property (retain) NSMutableArray* mutableRelationsList;
@property (retain) NSMutableArray* mutableChangesetsList;
@end

@implementation PrimitiveGroup

@synthesize mutableNodesList;
- (BOOL) hasDense {
  return !!hasDense_;
}
- (void) setHasDense:(BOOL) value {
  hasDense_ = !!value;
}
@synthesize dense;
@synthesize mutableWaysList;
@synthesize mutableRelationsList;
@synthesize mutableChangesetsList;
- (void) dealloc {
  self.mutableNodesList = nil;
  self.dense = nil;
  self.mutableWaysList = nil;
  self.mutableRelationsList = nil;
  self.mutableChangesetsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.dense = [DenseNodes defaultInstance];
  }
  return self;
}
static PrimitiveGroup* defaultPrimitiveGroupInstance = nil;
+ (void) initialize {
  if (self == [PrimitiveGroup class]) {
    defaultPrimitiveGroupInstance = [[PrimitiveGroup alloc] init];
  }
}
+ (PrimitiveGroup*) defaultInstance {
  return defaultPrimitiveGroupInstance;
}
- (PrimitiveGroup*) defaultInstance {
  return defaultPrimitiveGroupInstance;
}
- (NSArray*) nodesList {
  return mutableNodesList;
}
- (Node*) nodesAtIndex:(int32_t) index {
  id value = [mutableNodesList objectAtIndex:index];
  return value;
}
- (NSArray*) waysList {
  return mutableWaysList;
}
- (Way*) waysAtIndex:(int32_t) index {
  id value = [mutableWaysList objectAtIndex:index];
  return value;
}
- (NSArray*) relationsList {
  return mutableRelationsList;
}
- (Relation*) relationsAtIndex:(int32_t) index {
  id value = [mutableRelationsList objectAtIndex:index];
  return value;
}
- (NSArray*) changesetsList {
  return mutableChangesetsList;
}
- (ChangeSet*) changesetsAtIndex:(int32_t) index {
  id value = [mutableChangesetsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Node* element in self.nodesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Way* element in self.waysList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Relation* element in self.relationsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (ChangeSet* element in self.changesetsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Node* element in self.nodesList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasDense) {
    [output writeMessage:2 value:self.dense];
  }
  for (Way* element in self.waysList) {
    [output writeMessage:3 value:element];
  }
  for (Relation* element in self.relationsList) {
    [output writeMessage:4 value:element];
  }
  for (ChangeSet* element in self.changesetsList) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Node* element in self.nodesList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasDense) {
    size += computeMessageSize(2, self.dense);
  }
  for (Way* element in self.waysList) {
    size += computeMessageSize(3, element);
  }
  for (Relation* element in self.relationsList) {
    size += computeMessageSize(4, element);
  }
  for (ChangeSet* element in self.changesetsList) {
    size += computeMessageSize(5, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PrimitiveGroup*) parseFromData:(NSData*) data {
  return (PrimitiveGroup*)[[[PrimitiveGroup builder] mergeFromData:data] build];
}
+ (PrimitiveGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PrimitiveGroup*)[[[PrimitiveGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PrimitiveGroup*) parseFromInputStream:(NSInputStream*) input {
  return (PrimitiveGroup*)[[[PrimitiveGroup builder] mergeFromInputStream:input] build];
}
+ (PrimitiveGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PrimitiveGroup*)[[[PrimitiveGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PrimitiveGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PrimitiveGroup*)[[[PrimitiveGroup builder] mergeFromCodedInputStream:input] build];
}
+ (PrimitiveGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PrimitiveGroup*)[[[PrimitiveGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PrimitiveGroup_Builder*) builder {
  return [[[PrimitiveGroup_Builder alloc] init] autorelease];
}
+ (PrimitiveGroup_Builder*) builderWithPrototype:(PrimitiveGroup*) prototype {
  return [[PrimitiveGroup builder] mergeFrom:prototype];
}
- (PrimitiveGroup_Builder*) builder {
  return [PrimitiveGroup builder];
}
@end

@interface PrimitiveGroup_Builder()
@property (retain) PrimitiveGroup* result;
@end

@implementation PrimitiveGroup_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PrimitiveGroup alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PrimitiveGroup_Builder*) clear {
  self.result = [[[PrimitiveGroup alloc] init] autorelease];
  return self;
}
- (PrimitiveGroup_Builder*) clone {
  return [PrimitiveGroup builderWithPrototype:result];
}
- (PrimitiveGroup*) defaultInstance {
  return [PrimitiveGroup defaultInstance];
}
- (PrimitiveGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PrimitiveGroup*) buildPartial {
  PrimitiveGroup* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PrimitiveGroup_Builder*) mergeFrom:(PrimitiveGroup*) other {
  if (other == [PrimitiveGroup defaultInstance]) {
    return self;
  }
  if (other.mutableNodesList.count > 0) {
    if (result.mutableNodesList == nil) {
      result.mutableNodesList = [NSMutableArray array];
    }
    [result.mutableNodesList addObjectsFromArray:other.mutableNodesList];
  }
  if (other.hasDense) {
    [self mergeDense:other.dense];
  }
  if (other.mutableWaysList.count > 0) {
    if (result.mutableWaysList == nil) {
      result.mutableWaysList = [NSMutableArray array];
    }
    [result.mutableWaysList addObjectsFromArray:other.mutableWaysList];
  }
  if (other.mutableRelationsList.count > 0) {
    if (result.mutableRelationsList == nil) {
      result.mutableRelationsList = [NSMutableArray array];
    }
    [result.mutableRelationsList addObjectsFromArray:other.mutableRelationsList];
  }
  if (other.mutableChangesetsList.count > 0) {
    if (result.mutableChangesetsList == nil) {
      result.mutableChangesetsList = [NSMutableArray array];
    }
    [result.mutableChangesetsList addObjectsFromArray:other.mutableChangesetsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PrimitiveGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PrimitiveGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Node_Builder* subBuilder = [Node builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNodes:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        DenseNodes_Builder* subBuilder = [DenseNodes builder];
        if (self.hasDense) {
          [subBuilder mergeFrom:self.dense];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDense:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Way_Builder* subBuilder = [Way builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWays:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Relation_Builder* subBuilder = [Relation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRelations:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ChangeSet_Builder* subBuilder = [ChangeSet builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChangesets:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) nodesList {
  if (result.mutableNodesList == nil) { return [NSArray array]; }
  return result.mutableNodesList;
}
- (Node*) nodesAtIndex:(int32_t) index {
  return [result nodesAtIndex:index];
}
- (PrimitiveGroup_Builder*) replaceNodesAtIndex:(int32_t) index with:(Node*) value {
  [result.mutableNodesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PrimitiveGroup_Builder*) addAllNodes:(NSArray*) values {
  if (result.mutableNodesList == nil) {
    result.mutableNodesList = [NSMutableArray array];
  }
  [result.mutableNodesList addObjectsFromArray:values];
  return self;
}
- (PrimitiveGroup_Builder*) clearNodesList {
  result.mutableNodesList = nil;
  return self;
}
- (PrimitiveGroup_Builder*) addNodes:(Node*) value {
  if (result.mutableNodesList == nil) {
    result.mutableNodesList = [NSMutableArray array];
  }
  [result.mutableNodesList addObject:value];
  return self;
}
- (BOOL) hasDense {
  return result.hasDense;
}
- (DenseNodes*) dense {
  return result.dense;
}
- (PrimitiveGroup_Builder*) setDense:(DenseNodes*) value {
  result.hasDense = YES;
  result.dense = value;
  return self;
}
- (PrimitiveGroup_Builder*) setDenseBuilder:(DenseNodes_Builder*) builderForValue {
  return [self setDense:[builderForValue build]];
}
- (PrimitiveGroup_Builder*) mergeDense:(DenseNodes*) value {
  if (result.hasDense &&
      result.dense != [DenseNodes defaultInstance]) {
    result.dense =
      [[[DenseNodes builderWithPrototype:result.dense] mergeFrom:value] buildPartial];
  } else {
    result.dense = value;
  }
  result.hasDense = YES;
  return self;
}
- (PrimitiveGroup_Builder*) clearDense {
  result.hasDense = NO;
  result.dense = [DenseNodes defaultInstance];
  return self;
}
- (NSArray*) waysList {
  if (result.mutableWaysList == nil) { return [NSArray array]; }
  return result.mutableWaysList;
}
- (Way*) waysAtIndex:(int32_t) index {
  return [result waysAtIndex:index];
}
- (PrimitiveGroup_Builder*) replaceWaysAtIndex:(int32_t) index with:(Way*) value {
  [result.mutableWaysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PrimitiveGroup_Builder*) addAllWays:(NSArray*) values {
  if (result.mutableWaysList == nil) {
    result.mutableWaysList = [NSMutableArray array];
  }
  [result.mutableWaysList addObjectsFromArray:values];
  return self;
}
- (PrimitiveGroup_Builder*) clearWaysList {
  result.mutableWaysList = nil;
  return self;
}
- (PrimitiveGroup_Builder*) addWays:(Way*) value {
  if (result.mutableWaysList == nil) {
    result.mutableWaysList = [NSMutableArray array];
  }
  [result.mutableWaysList addObject:value];
  return self;
}
- (NSArray*) relationsList {
  if (result.mutableRelationsList == nil) { return [NSArray array]; }
  return result.mutableRelationsList;
}
- (Relation*) relationsAtIndex:(int32_t) index {
  return [result relationsAtIndex:index];
}
- (PrimitiveGroup_Builder*) replaceRelationsAtIndex:(int32_t) index with:(Relation*) value {
  [result.mutableRelationsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PrimitiveGroup_Builder*) addAllRelations:(NSArray*) values {
  if (result.mutableRelationsList == nil) {
    result.mutableRelationsList = [NSMutableArray array];
  }
  [result.mutableRelationsList addObjectsFromArray:values];
  return self;
}
- (PrimitiveGroup_Builder*) clearRelationsList {
  result.mutableRelationsList = nil;
  return self;
}
- (PrimitiveGroup_Builder*) addRelations:(Relation*) value {
  if (result.mutableRelationsList == nil) {
    result.mutableRelationsList = [NSMutableArray array];
  }
  [result.mutableRelationsList addObject:value];
  return self;
}
- (NSArray*) changesetsList {
  if (result.mutableChangesetsList == nil) { return [NSArray array]; }
  return result.mutableChangesetsList;
}
- (ChangeSet*) changesetsAtIndex:(int32_t) index {
  return [result changesetsAtIndex:index];
}
- (PrimitiveGroup_Builder*) replaceChangesetsAtIndex:(int32_t) index with:(ChangeSet*) value {
  [result.mutableChangesetsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PrimitiveGroup_Builder*) addAllChangesets:(NSArray*) values {
  if (result.mutableChangesetsList == nil) {
    result.mutableChangesetsList = [NSMutableArray array];
  }
  [result.mutableChangesetsList addObjectsFromArray:values];
  return self;
}
- (PrimitiveGroup_Builder*) clearChangesetsList {
  result.mutableChangesetsList = nil;
  return self;
}
- (PrimitiveGroup_Builder*) addChangesets:(ChangeSet*) value {
  if (result.mutableChangesetsList == nil) {
    result.mutableChangesetsList = [NSMutableArray array];
  }
  [result.mutableChangesetsList addObject:value];
  return self;
}
@end

@interface StringTable ()
@property (retain) NSMutableArray* mutableSList;
@end

@implementation StringTable

@synthesize mutableSList;
- (void) dealloc {
  self.mutableSList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static StringTable* defaultStringTableInstance = nil;
+ (void) initialize {
  if (self == [StringTable class]) {
    defaultStringTableInstance = [[StringTable alloc] init];
  }
}
+ (StringTable*) defaultInstance {
  return defaultStringTableInstance;
}
- (StringTable*) defaultInstance {
  return defaultStringTableInstance;
}
- (NSArray*) sList {
  return mutableSList;
}
- (NSData*) sAtIndex:(int32_t) index {
  id value = [mutableSList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSData* element in self.mutableSList) {
    [output writeData:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSData* element in self.mutableSList) {
      dataSize += computeDataSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableSList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StringTable*) parseFromData:(NSData*) data {
  return (StringTable*)[[[StringTable builder] mergeFromData:data] build];
}
+ (StringTable*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringTable*)[[[StringTable builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StringTable*) parseFromInputStream:(NSInputStream*) input {
  return (StringTable*)[[[StringTable builder] mergeFromInputStream:input] build];
}
+ (StringTable*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringTable*)[[[StringTable builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StringTable*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StringTable*)[[[StringTable builder] mergeFromCodedInputStream:input] build];
}
+ (StringTable*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringTable*)[[[StringTable builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StringTable_Builder*) builder {
  return [[[StringTable_Builder alloc] init] autorelease];
}
+ (StringTable_Builder*) builderWithPrototype:(StringTable*) prototype {
  return [[StringTable builder] mergeFrom:prototype];
}
- (StringTable_Builder*) builder {
  return [StringTable builder];
}
@end

@interface StringTable_Builder()
@property (retain) StringTable* result;
@end

@implementation StringTable_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StringTable alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StringTable_Builder*) clear {
  self.result = [[[StringTable alloc] init] autorelease];
  return self;
}
- (StringTable_Builder*) clone {
  return [StringTable builderWithPrototype:result];
}
- (StringTable*) defaultInstance {
  return [StringTable defaultInstance];
}
- (StringTable*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StringTable*) buildPartial {
  StringTable* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StringTable_Builder*) mergeFrom:(StringTable*) other {
  if (other == [StringTable defaultInstance]) {
    return self;
  }
  if (other.mutableSList.count > 0) {
    if (result.mutableSList == nil) {
      result.mutableSList = [NSMutableArray array];
    }
    [result.mutableSList addObjectsFromArray:other.mutableSList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StringTable_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StringTable_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addS:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) sList {
  if (result.mutableSList == nil) {
    return [NSArray array];
  }
  return result.mutableSList;
}
- (NSData*) sAtIndex:(int32_t) index {
  return [result sAtIndex:index];
}
- (StringTable_Builder*) replaceSAtIndex:(int32_t) index with:(NSData*) value {
  [result.mutableSList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StringTable_Builder*) addS:(NSData*) value {
  if (result.mutableSList == nil) {
    result.mutableSList = [NSMutableArray array];
  }
  [result.mutableSList addObject:value];
  return self;
}
- (StringTable_Builder*) addAllS:(NSArray*) values {
  if (result.mutableSList == nil) {
    result.mutableSList = [NSMutableArray array];
  }
  [result.mutableSList addObjectsFromArray:values];
  return self;
}
- (StringTable_Builder*) clearSList {
  result.mutableSList = nil;
  return self;
}
@end

@interface Info ()
@property int32_t version;
@property int64_t timestamp;
@property int64_t changeset;
@property int32_t uid;
@property int32_t userSid;
@property BOOL visible;
@end

@implementation Info

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (BOOL) hasChangeset {
  return !!hasChangeset_;
}
- (void) setHasChangeset:(BOOL) value {
  hasChangeset_ = !!value;
}
@synthesize changeset;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value {
  hasUid_ = !!value;
}
@synthesize uid;
- (BOOL) hasUserSid {
  return !!hasUserSid_;
}
- (void) setHasUserSid:(BOOL) value {
  hasUserSid_ = !!value;
}
@synthesize userSid;
- (BOOL) hasVisible {
  return !!hasVisible_;
}
- (void) setHasVisible:(BOOL) value {
  hasVisible_ = !!value;
}
- (BOOL) visible {
  return !!visible_;
}
- (void) setVisible:(BOOL) value {
  visible_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = -1;
    self.timestamp = 0L;
    self.changeset = 0L;
    self.uid = 0;
    self.userSid = 0;
    self.visible = NO;
  }
  return self;
}
static Info* defaultInfoInstance = nil;
+ (void) initialize {
  if (self == [Info class]) {
    defaultInfoInstance = [[Info alloc] init];
  }
}
+ (Info*) defaultInstance {
  return defaultInfoInstance;
}
- (Info*) defaultInstance {
  return defaultInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeInt32:1 value:self.version];
  }
  if (self.hasTimestamp) {
    [output writeInt64:2 value:self.timestamp];
  }
  if (self.hasChangeset) {
    [output writeInt64:3 value:self.changeset];
  }
  if (self.hasUid) {
    [output writeInt32:4 value:self.uid];
  }
  if (self.hasUserSid) {
    [output writeUInt32:5 value:self.userSid];
  }
  if (self.hasVisible) {
    [output writeBool:6 value:self.visible];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeInt32Size(1, self.version);
  }
  if (self.hasTimestamp) {
    size += computeInt64Size(2, self.timestamp);
  }
  if (self.hasChangeset) {
    size += computeInt64Size(3, self.changeset);
  }
  if (self.hasUid) {
    size += computeInt32Size(4, self.uid);
  }
  if (self.hasUserSid) {
    size += computeUInt32Size(5, self.userSid);
  }
  if (self.hasVisible) {
    size += computeBoolSize(6, self.visible);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Info*) parseFromData:(NSData*) data {
  return (Info*)[[[Info builder] mergeFromData:data] build];
}
+ (Info*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Info*)[[[Info builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Info*) parseFromInputStream:(NSInputStream*) input {
  return (Info*)[[[Info builder] mergeFromInputStream:input] build];
}
+ (Info*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Info*)[[[Info builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Info*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Info*)[[[Info builder] mergeFromCodedInputStream:input] build];
}
+ (Info*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Info*)[[[Info builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Info_Builder*) builder {
  return [[[Info_Builder alloc] init] autorelease];
}
+ (Info_Builder*) builderWithPrototype:(Info*) prototype {
  return [[Info builder] mergeFrom:prototype];
}
- (Info_Builder*) builder {
  return [Info builder];
}
@end

@interface Info_Builder()
@property (retain) Info* result;
@end

@implementation Info_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Info alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Info_Builder*) clear {
  self.result = [[[Info alloc] init] autorelease];
  return self;
}
- (Info_Builder*) clone {
  return [Info builderWithPrototype:result];
}
- (Info*) defaultInstance {
  return [Info defaultInstance];
}
- (Info*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Info*) buildPartial {
  Info* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Info_Builder*) mergeFrom:(Info*) other {
  if (other == [Info defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasChangeset) {
    [self setChangeset:other.changeset];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasUserSid) {
    [self setUserSid:other.userSid];
  }
  if (other.hasVisible) {
    [self setVisible:other.visible];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Info_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Info_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 24: {
        [self setChangeset:[input readInt64]];
        break;
      }
      case 32: {
        [self setUid:[input readInt32]];
        break;
      }
      case 40: {
        [self setUserSid:[input readUInt32]];
        break;
      }
      case 48: {
        [self setVisible:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (Info_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (Info_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = -1;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (Info_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (Info_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasChangeset {
  return result.hasChangeset;
}
- (int64_t) changeset {
  return result.changeset;
}
- (Info_Builder*) setChangeset:(int64_t) value {
  result.hasChangeset = YES;
  result.changeset = value;
  return self;
}
- (Info_Builder*) clearChangeset {
  result.hasChangeset = NO;
  result.changeset = 0L;
  return self;
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (int32_t) uid {
  return result.uid;
}
- (Info_Builder*) setUid:(int32_t) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (Info_Builder*) clearUid {
  result.hasUid = NO;
  result.uid = 0;
  return self;
}
- (BOOL) hasUserSid {
  return result.hasUserSid;
}
- (int32_t) userSid {
  return result.userSid;
}
- (Info_Builder*) setUserSid:(int32_t) value {
  result.hasUserSid = YES;
  result.userSid = value;
  return self;
}
- (Info_Builder*) clearUserSid {
  result.hasUserSid = NO;
  result.userSid = 0;
  return self;
}
- (BOOL) hasVisible {
  return result.hasVisible;
}
- (BOOL) visible {
  return result.visible;
}
- (Info_Builder*) setVisible:(BOOL) value {
  result.hasVisible = YES;
  result.visible = value;
  return self;
}
- (Info_Builder*) clearVisible {
  result.hasVisible = NO;
  result.visible = NO;
  return self;
}
@end

@interface DenseInfo ()
@property (retain) NSMutableArray* mutableVersionList;
@property (retain) NSMutableArray* mutableTimestampList;
@property (retain) NSMutableArray* mutableChangesetList;
@property (retain) NSMutableArray* mutableUidList;
@property (retain) NSMutableArray* mutableUserSidList;
@property (retain) NSMutableArray* mutableVisibleList;
@end

@implementation DenseInfo

@synthesize mutableVersionList;
@synthesize mutableTimestampList;
@synthesize mutableChangesetList;
@synthesize mutableUidList;
@synthesize mutableUserSidList;
@synthesize mutableVisibleList;
- (void) dealloc {
  self.mutableVersionList = nil;
  self.mutableTimestampList = nil;
  self.mutableChangesetList = nil;
  self.mutableUidList = nil;
  self.mutableUserSidList = nil;
  self.mutableVisibleList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static DenseInfo* defaultDenseInfoInstance = nil;
+ (void) initialize {
  if (self == [DenseInfo class]) {
    defaultDenseInfoInstance = [[DenseInfo alloc] init];
  }
}
+ (DenseInfo*) defaultInstance {
  return defaultDenseInfoInstance;
}
- (DenseInfo*) defaultInstance {
  return defaultDenseInfoInstance;
}
- (NSArray*) versionList {
  return mutableVersionList;
}
- (int32_t) versionAtIndex:(int32_t) index {
  id value = [mutableVersionList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) timestampList {
  return mutableTimestampList;
}
- (int64_t) timestampAtIndex:(int32_t) index {
  id value = [mutableTimestampList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) changesetList {
  return mutableChangesetList;
}
- (int64_t) changesetAtIndex:(int32_t) index {
  id value = [mutableChangesetList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) uidList {
  return mutableUidList;
}
- (int32_t) uidAtIndex:(int32_t) index {
  id value = [mutableUidList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) userSidList {
  return mutableUserSidList;
}
- (int32_t) userSidAtIndex:(int32_t) index {
  id value = [mutableUserSidList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) visibleList {
  return mutableVisibleList;
}
- (BOOL) visibleAtIndex:(int32_t) index {
  id value = [mutableVisibleList objectAtIndex:index];
  return [value boolValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutableVersionList.count > 0) {
    [output writeRawVarint32:10];
    [output writeRawVarint32:versionMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableVersionList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.mutableTimestampList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:timestampMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableTimestampList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  if (self.mutableChangesetList.count > 0) {
    [output writeRawVarint32:26];
    [output writeRawVarint32:changesetMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableChangesetList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  if (self.mutableUidList.count > 0) {
    [output writeRawVarint32:34];
    [output writeRawVarint32:uidMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableUidList) {
    [output writeSInt32NoTag:[value intValue]];
  }
  if (self.mutableUserSidList.count > 0) {
    [output writeRawVarint32:42];
    [output writeRawVarint32:userSidMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableUserSidList) {
    [output writeSInt32NoTag:[value intValue]];
  }
  if (self.mutableVisibleList.count > 0) {
    [output writeRawVarint32:50];
    [output writeRawVarint32:visibleMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableVisibleList) {
    [output writeBoolNoTag:[value boolValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableVersionList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableVersionList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    versionMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableTimestampList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableTimestampList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    timestampMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableChangesetList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableChangesetList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    changesetMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableUidList) {
      dataSize += computeSInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableUidList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    uidMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableUserSidList) {
      dataSize += computeSInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableUserSidList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    userSidMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    dataSize = 1 * self.mutableVisibleList.count;
    size += dataSize;
    if (self.mutableVisibleList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    visibleMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DenseInfo*) parseFromData:(NSData*) data {
  return (DenseInfo*)[[[DenseInfo builder] mergeFromData:data] build];
}
+ (DenseInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DenseInfo*)[[[DenseInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DenseInfo*) parseFromInputStream:(NSInputStream*) input {
  return (DenseInfo*)[[[DenseInfo builder] mergeFromInputStream:input] build];
}
+ (DenseInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DenseInfo*)[[[DenseInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DenseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DenseInfo*)[[[DenseInfo builder] mergeFromCodedInputStream:input] build];
}
+ (DenseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DenseInfo*)[[[DenseInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DenseInfo_Builder*) builder {
  return [[[DenseInfo_Builder alloc] init] autorelease];
}
+ (DenseInfo_Builder*) builderWithPrototype:(DenseInfo*) prototype {
  return [[DenseInfo builder] mergeFrom:prototype];
}
- (DenseInfo_Builder*) builder {
  return [DenseInfo builder];
}
@end

@interface DenseInfo_Builder()
@property (retain) DenseInfo* result;
@end

@implementation DenseInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DenseInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DenseInfo_Builder*) clear {
  self.result = [[[DenseInfo alloc] init] autorelease];
  return self;
}
- (DenseInfo_Builder*) clone {
  return [DenseInfo builderWithPrototype:result];
}
- (DenseInfo*) defaultInstance {
  return [DenseInfo defaultInstance];
}
- (DenseInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DenseInfo*) buildPartial {
  DenseInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DenseInfo_Builder*) mergeFrom:(DenseInfo*) other {
  if (other == [DenseInfo defaultInstance]) {
    return self;
  }
  if (other.mutableVersionList.count > 0) {
    if (result.mutableVersionList == nil) {
      result.mutableVersionList = [NSMutableArray array];
    }
    [result.mutableVersionList addObjectsFromArray:other.mutableVersionList];
  }
  if (other.mutableTimestampList.count > 0) {
    if (result.mutableTimestampList == nil) {
      result.mutableTimestampList = [NSMutableArray array];
    }
    [result.mutableTimestampList addObjectsFromArray:other.mutableTimestampList];
  }
  if (other.mutableChangesetList.count > 0) {
    if (result.mutableChangesetList == nil) {
      result.mutableChangesetList = [NSMutableArray array];
    }
    [result.mutableChangesetList addObjectsFromArray:other.mutableChangesetList];
  }
  if (other.mutableUidList.count > 0) {
    if (result.mutableUidList == nil) {
      result.mutableUidList = [NSMutableArray array];
    }
    [result.mutableUidList addObjectsFromArray:other.mutableUidList];
  }
  if (other.mutableUserSidList.count > 0) {
    if (result.mutableUserSidList == nil) {
      result.mutableUserSidList = [NSMutableArray array];
    }
    [result.mutableUserSidList addObjectsFromArray:other.mutableUserSidList];
  }
  if (other.mutableVisibleList.count > 0) {
    if (result.mutableVisibleList == nil) {
      result.mutableVisibleList = [NSMutableArray array];
    }
    [result.mutableVisibleList addObjectsFromArray:other.mutableVisibleList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DenseInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DenseInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addVersion:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addTimestamp:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 26: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addChangeset:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 34: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addUid:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 42: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addUserSid:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 50: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addVisible:[input readBool]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (NSArray*) versionList {
  if (result.mutableVersionList == nil) {
    return [NSArray array];
  }
  return result.mutableVersionList;
}
- (int32_t) versionAtIndex:(int32_t) index {
  return [result versionAtIndex:index];
}
- (DenseInfo_Builder*) replaceVersionAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableVersionList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseInfo_Builder*) addVersion:(int32_t) value {
  if (result.mutableVersionList == nil) {
    result.mutableVersionList = [NSMutableArray array];
  }
  [result.mutableVersionList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseInfo_Builder*) addAllVersion:(NSArray*) values {
  if (result.mutableVersionList == nil) {
    result.mutableVersionList = [NSMutableArray array];
  }
  [result.mutableVersionList addObjectsFromArray:values];
  return self;
}
- (DenseInfo_Builder*) clearVersionList {
  result.mutableVersionList = nil;
  return self;
}
- (NSArray*) timestampList {
  if (result.mutableTimestampList == nil) {
    return [NSArray array];
  }
  return result.mutableTimestampList;
}
- (int64_t) timestampAtIndex:(int32_t) index {
  return [result timestampAtIndex:index];
}
- (DenseInfo_Builder*) replaceTimestampAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableTimestampList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseInfo_Builder*) addTimestamp:(int64_t) value {
  if (result.mutableTimestampList == nil) {
    result.mutableTimestampList = [NSMutableArray array];
  }
  [result.mutableTimestampList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseInfo_Builder*) addAllTimestamp:(NSArray*) values {
  if (result.mutableTimestampList == nil) {
    result.mutableTimestampList = [NSMutableArray array];
  }
  [result.mutableTimestampList addObjectsFromArray:values];
  return self;
}
- (DenseInfo_Builder*) clearTimestampList {
  result.mutableTimestampList = nil;
  return self;
}
- (NSArray*) changesetList {
  if (result.mutableChangesetList == nil) {
    return [NSArray array];
  }
  return result.mutableChangesetList;
}
- (int64_t) changesetAtIndex:(int32_t) index {
  return [result changesetAtIndex:index];
}
- (DenseInfo_Builder*) replaceChangesetAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableChangesetList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseInfo_Builder*) addChangeset:(int64_t) value {
  if (result.mutableChangesetList == nil) {
    result.mutableChangesetList = [NSMutableArray array];
  }
  [result.mutableChangesetList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseInfo_Builder*) addAllChangeset:(NSArray*) values {
  if (result.mutableChangesetList == nil) {
    result.mutableChangesetList = [NSMutableArray array];
  }
  [result.mutableChangesetList addObjectsFromArray:values];
  return self;
}
- (DenseInfo_Builder*) clearChangesetList {
  result.mutableChangesetList = nil;
  return self;
}
- (NSArray*) uidList {
  if (result.mutableUidList == nil) {
    return [NSArray array];
  }
  return result.mutableUidList;
}
- (int32_t) uidAtIndex:(int32_t) index {
  return [result uidAtIndex:index];
}
- (DenseInfo_Builder*) replaceUidAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableUidList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseInfo_Builder*) addUid:(int32_t) value {
  if (result.mutableUidList == nil) {
    result.mutableUidList = [NSMutableArray array];
  }
  [result.mutableUidList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseInfo_Builder*) addAllUid:(NSArray*) values {
  if (result.mutableUidList == nil) {
    result.mutableUidList = [NSMutableArray array];
  }
  [result.mutableUidList addObjectsFromArray:values];
  return self;
}
- (DenseInfo_Builder*) clearUidList {
  result.mutableUidList = nil;
  return self;
}
- (NSArray*) userSidList {
  if (result.mutableUserSidList == nil) {
    return [NSArray array];
  }
  return result.mutableUserSidList;
}
- (int32_t) userSidAtIndex:(int32_t) index {
  return [result userSidAtIndex:index];
}
- (DenseInfo_Builder*) replaceUserSidAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableUserSidList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseInfo_Builder*) addUserSid:(int32_t) value {
  if (result.mutableUserSidList == nil) {
    result.mutableUserSidList = [NSMutableArray array];
  }
  [result.mutableUserSidList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseInfo_Builder*) addAllUserSid:(NSArray*) values {
  if (result.mutableUserSidList == nil) {
    result.mutableUserSidList = [NSMutableArray array];
  }
  [result.mutableUserSidList addObjectsFromArray:values];
  return self;
}
- (DenseInfo_Builder*) clearUserSidList {
  result.mutableUserSidList = nil;
  return self;
}
- (NSArray*) visibleList {
  if (result.mutableVisibleList == nil) {
    return [NSArray array];
  }
  return result.mutableVisibleList;
}
- (BOOL) visibleAtIndex:(int32_t) index {
  return [result visibleAtIndex:index];
}
- (DenseInfo_Builder*) replaceVisibleAtIndex:(int32_t) index with:(BOOL) value {
  [result.mutableVisibleList replaceObjectAtIndex:index withObject:[NSNumber numberWithBool:value]];
  return self;
}
- (DenseInfo_Builder*) addVisible:(BOOL) value {
  if (result.mutableVisibleList == nil) {
    result.mutableVisibleList = [NSMutableArray array];
  }
  [result.mutableVisibleList addObject:[NSNumber numberWithBool:value]];
  return self;
}
- (DenseInfo_Builder*) addAllVisible:(NSArray*) values {
  if (result.mutableVisibleList == nil) {
    result.mutableVisibleList = [NSMutableArray array];
  }
  [result.mutableVisibleList addObjectsFromArray:values];
  return self;
}
- (DenseInfo_Builder*) clearVisibleList {
  result.mutableVisibleList = nil;
  return self;
}
@end

@interface ChangeSet ()
@property int64_t id;
@end

@implementation ChangeSet

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
  }
  return self;
}
static ChangeSet* defaultChangeSetInstance = nil;
+ (void) initialize {
  if (self == [ChangeSet class]) {
    defaultChangeSetInstance = [[ChangeSet alloc] init];
  }
}
+ (ChangeSet*) defaultInstance {
  return defaultChangeSetInstance;
}
- (ChangeSet*) defaultInstance {
  return defaultChangeSetInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt64Size(1, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ChangeSet*) parseFromData:(NSData*) data {
  return (ChangeSet*)[[[ChangeSet builder] mergeFromData:data] build];
}
+ (ChangeSet*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeSet*)[[[ChangeSet builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChangeSet*) parseFromInputStream:(NSInputStream*) input {
  return (ChangeSet*)[[[ChangeSet builder] mergeFromInputStream:input] build];
}
+ (ChangeSet*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeSet*)[[[ChangeSet builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeSet*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChangeSet*)[[[ChangeSet builder] mergeFromCodedInputStream:input] build];
}
+ (ChangeSet*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeSet*)[[[ChangeSet builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeSet_Builder*) builder {
  return [[[ChangeSet_Builder alloc] init] autorelease];
}
+ (ChangeSet_Builder*) builderWithPrototype:(ChangeSet*) prototype {
  return [[ChangeSet builder] mergeFrom:prototype];
}
- (ChangeSet_Builder*) builder {
  return [ChangeSet builder];
}
@end

@interface ChangeSet_Builder()
@property (retain) ChangeSet* result;
@end

@implementation ChangeSet_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ChangeSet alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ChangeSet_Builder*) clear {
  self.result = [[[ChangeSet alloc] init] autorelease];
  return self;
}
- (ChangeSet_Builder*) clone {
  return [ChangeSet builderWithPrototype:result];
}
- (ChangeSet*) defaultInstance {
  return [ChangeSet defaultInstance];
}
- (ChangeSet*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChangeSet*) buildPartial {
  ChangeSet* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ChangeSet_Builder*) mergeFrom:(ChangeSet*) other {
  if (other == [ChangeSet defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChangeSet_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChangeSet_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int64_t) id {
  return result.id;
}
- (ChangeSet_Builder*) setId:(int64_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (ChangeSet_Builder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
@end

@interface Node ()
@property int64_t id;
@property (retain) NSMutableArray* mutableKeysList;
@property (retain) NSMutableArray* mutableValsList;
@property (retain) Info* info;
@property int64_t lat;
@property int64_t lon;
@end

@implementation Node

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
@synthesize mutableKeysList;
@synthesize mutableValsList;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) value {
  hasInfo_ = !!value;
}
@synthesize info;
- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) value {
  hasLat_ = !!value;
}
@synthesize lat;
- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) value {
  hasLon_ = !!value;
}
@synthesize lon;
- (void) dealloc {
  self.mutableKeysList = nil;
  self.mutableValsList = nil;
  self.info = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.info = [Info defaultInstance];
    self.lat = 0L;
    self.lon = 0L;
  }
  return self;
}
static Node* defaultNodeInstance = nil;
+ (void) initialize {
  if (self == [Node class]) {
    defaultNodeInstance = [[Node alloc] init];
  }
}
+ (Node*) defaultInstance {
  return defaultNodeInstance;
}
- (Node*) defaultInstance {
  return defaultNodeInstance;
}
- (NSArray*) keysList {
  return mutableKeysList;
}
- (int32_t) keysAtIndex:(int32_t) index {
  id value = [mutableKeysList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) valsList {
  return mutableValsList;
}
- (int32_t) valsAtIndex:(int32_t) index {
  id value = [mutableValsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasLat) {
    return NO;
  }
  if (!self.hasLon) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.mutableKeysList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:keysMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableKeysList) {
    [output writeUInt32NoTag:[value intValue]];
  }
  if (self.mutableValsList.count > 0) {
    [output writeRawVarint32:26];
    [output writeRawVarint32:valsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableValsList) {
    [output writeUInt32NoTag:[value intValue]];
  }
  if (self.hasInfo) {
    [output writeMessage:4 value:self.info];
  }
  if (self.hasLat) {
    [output writeSInt64:8 value:self.lat];
  }
  if (self.hasLon) {
    [output writeSInt64:9 value:self.lon];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeSInt64Size(1, self.id);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableKeysList) {
      dataSize += computeUInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableKeysList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    keysMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableValsList) {
      dataSize += computeUInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableValsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    valsMemoizedSerializedSize = dataSize;
  }
  if (self.hasInfo) {
    size += computeMessageSize(4, self.info);
  }
  if (self.hasLat) {
    size += computeSInt64Size(8, self.lat);
  }
  if (self.hasLon) {
    size += computeSInt64Size(9, self.lon);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Node*) parseFromData:(NSData*) data {
  return (Node*)[[[Node builder] mergeFromData:data] build];
}
+ (Node*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Node*)[[[Node builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Node*) parseFromInputStream:(NSInputStream*) input {
  return (Node*)[[[Node builder] mergeFromInputStream:input] build];
}
+ (Node*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Node*)[[[Node builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Node*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Node*)[[[Node builder] mergeFromCodedInputStream:input] build];
}
+ (Node*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Node*)[[[Node builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Node_Builder*) builder {
  return [[[Node_Builder alloc] init] autorelease];
}
+ (Node_Builder*) builderWithPrototype:(Node*) prototype {
  return [[Node builder] mergeFrom:prototype];
}
- (Node_Builder*) builder {
  return [Node builder];
}
@end

@interface Node_Builder()
@property (retain) Node* result;
@end

@implementation Node_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Node alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Node_Builder*) clear {
  self.result = [[[Node alloc] init] autorelease];
  return self;
}
- (Node_Builder*) clone {
  return [Node builderWithPrototype:result];
}
- (Node*) defaultInstance {
  return [Node defaultInstance];
}
- (Node*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Node*) buildPartial {
  Node* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Node_Builder*) mergeFrom:(Node*) other {
  if (other == [Node defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.mutableKeysList.count > 0) {
    if (result.mutableKeysList == nil) {
      result.mutableKeysList = [NSMutableArray array];
    }
    [result.mutableKeysList addObjectsFromArray:other.mutableKeysList];
  }
  if (other.mutableValsList.count > 0) {
    if (result.mutableValsList == nil) {
      result.mutableValsList = [NSMutableArray array];
    }
    [result.mutableValsList addObjectsFromArray:other.mutableValsList];
  }
  if (other.hasInfo) {
    [self mergeInfo:other.info];
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Node_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Node_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addKeys:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 26: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addVals:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 34: {
        Info_Builder* subBuilder = [Info builder];
        if (self.hasInfo) {
          [subBuilder mergeFrom:self.info];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInfo:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setLat:[input readSInt64]];
        break;
      }
      case 72: {
        [self setLon:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int64_t) id {
  return result.id;
}
- (Node_Builder*) setId:(int64_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Node_Builder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (NSArray*) keysList {
  if (result.mutableKeysList == nil) {
    return [NSArray array];
  }
  return result.mutableKeysList;
}
- (int32_t) keysAtIndex:(int32_t) index {
  return [result keysAtIndex:index];
}
- (Node_Builder*) replaceKeysAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableKeysList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Node_Builder*) addKeys:(int32_t) value {
  if (result.mutableKeysList == nil) {
    result.mutableKeysList = [NSMutableArray array];
  }
  [result.mutableKeysList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Node_Builder*) addAllKeys:(NSArray*) values {
  if (result.mutableKeysList == nil) {
    result.mutableKeysList = [NSMutableArray array];
  }
  [result.mutableKeysList addObjectsFromArray:values];
  return self;
}
- (Node_Builder*) clearKeysList {
  result.mutableKeysList = nil;
  return self;
}
- (NSArray*) valsList {
  if (result.mutableValsList == nil) {
    return [NSArray array];
  }
  return result.mutableValsList;
}
- (int32_t) valsAtIndex:(int32_t) index {
  return [result valsAtIndex:index];
}
- (Node_Builder*) replaceValsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableValsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Node_Builder*) addVals:(int32_t) value {
  if (result.mutableValsList == nil) {
    result.mutableValsList = [NSMutableArray array];
  }
  [result.mutableValsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Node_Builder*) addAllVals:(NSArray*) values {
  if (result.mutableValsList == nil) {
    result.mutableValsList = [NSMutableArray array];
  }
  [result.mutableValsList addObjectsFromArray:values];
  return self;
}
- (Node_Builder*) clearValsList {
  result.mutableValsList = nil;
  return self;
}
- (BOOL) hasInfo {
  return result.hasInfo;
}
- (Info*) info {
  return result.info;
}
- (Node_Builder*) setInfo:(Info*) value {
  result.hasInfo = YES;
  result.info = value;
  return self;
}
- (Node_Builder*) setInfoBuilder:(Info_Builder*) builderForValue {
  return [self setInfo:[builderForValue build]];
}
- (Node_Builder*) mergeInfo:(Info*) value {
  if (result.hasInfo &&
      result.info != [Info defaultInstance]) {
    result.info =
      [[[Info builderWithPrototype:result.info] mergeFrom:value] buildPartial];
  } else {
    result.info = value;
  }
  result.hasInfo = YES;
  return self;
}
- (Node_Builder*) clearInfo {
  result.hasInfo = NO;
  result.info = [Info defaultInstance];
  return self;
}
- (BOOL) hasLat {
  return result.hasLat;
}
- (int64_t) lat {
  return result.lat;
}
- (Node_Builder*) setLat:(int64_t) value {
  result.hasLat = YES;
  result.lat = value;
  return self;
}
- (Node_Builder*) clearLat {
  result.hasLat = NO;
  result.lat = 0L;
  return self;
}
- (BOOL) hasLon {
  return result.hasLon;
}
- (int64_t) lon {
  return result.lon;
}
- (Node_Builder*) setLon:(int64_t) value {
  result.hasLon = YES;
  result.lon = value;
  return self;
}
- (Node_Builder*) clearLon {
  result.hasLon = NO;
  result.lon = 0L;
  return self;
}
@end

@interface DenseNodes ()
@property (retain) NSMutableArray* mutableIdList;
@property (retain) DenseInfo* denseinfo;
@property (retain) NSMutableArray* mutableLatList;
@property (retain) NSMutableArray* mutableLonList;
@property (retain) NSMutableArray* mutableKeysValsList;
@end

@implementation DenseNodes

@synthesize mutableIdList;
- (BOOL) hasDenseinfo {
  return !!hasDenseinfo_;
}
- (void) setHasDenseinfo:(BOOL) value {
  hasDenseinfo_ = !!value;
}
@synthesize denseinfo;
@synthesize mutableLatList;
@synthesize mutableLonList;
@synthesize mutableKeysValsList;
- (void) dealloc {
  self.mutableIdList = nil;
  self.denseinfo = nil;
  self.mutableLatList = nil;
  self.mutableLonList = nil;
  self.mutableKeysValsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.denseinfo = [DenseInfo defaultInstance];
  }
  return self;
}
static DenseNodes* defaultDenseNodesInstance = nil;
+ (void) initialize {
  if (self == [DenseNodes class]) {
    defaultDenseNodesInstance = [[DenseNodes alloc] init];
  }
}
+ (DenseNodes*) defaultInstance {
  return defaultDenseNodesInstance;
}
- (DenseNodes*) defaultInstance {
  return defaultDenseNodesInstance;
}
- (NSArray*) idList {
  return mutableIdList;
}
- (int64_t) idAtIndex:(int32_t) index {
  id value = [mutableIdList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) latList {
  return mutableLatList;
}
- (int64_t) latAtIndex:(int32_t) index {
  id value = [mutableLatList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) lonList {
  return mutableLonList;
}
- (int64_t) lonAtIndex:(int32_t) index {
  id value = [mutableLonList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) keysValsList {
  return mutableKeysValsList;
}
- (int32_t) keysValsAtIndex:(int32_t) index {
  id value = [mutableKeysValsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutableIdList.count > 0) {
    [output writeRawVarint32:10];
    [output writeRawVarint32:idMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableIdList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  if (self.hasDenseinfo) {
    [output writeMessage:5 value:self.denseinfo];
  }
  if (self.mutableLatList.count > 0) {
    [output writeRawVarint32:66];
    [output writeRawVarint32:latMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableLatList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  if (self.mutableLonList.count > 0) {
    [output writeRawVarint32:74];
    [output writeRawVarint32:lonMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableLonList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  if (self.mutableKeysValsList.count > 0) {
    [output writeRawVarint32:82];
    [output writeRawVarint32:keysValsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableKeysValsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableIdList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableIdList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    idMemoizedSerializedSize = dataSize;
  }
  if (self.hasDenseinfo) {
    size += computeMessageSize(5, self.denseinfo);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableLatList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableLatList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    latMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableLonList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableLonList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    lonMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableKeysValsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableKeysValsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    keysValsMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DenseNodes*) parseFromData:(NSData*) data {
  return (DenseNodes*)[[[DenseNodes builder] mergeFromData:data] build];
}
+ (DenseNodes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DenseNodes*)[[[DenseNodes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DenseNodes*) parseFromInputStream:(NSInputStream*) input {
  return (DenseNodes*)[[[DenseNodes builder] mergeFromInputStream:input] build];
}
+ (DenseNodes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DenseNodes*)[[[DenseNodes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DenseNodes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DenseNodes*)[[[DenseNodes builder] mergeFromCodedInputStream:input] build];
}
+ (DenseNodes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DenseNodes*)[[[DenseNodes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DenseNodes_Builder*) builder {
  return [[[DenseNodes_Builder alloc] init] autorelease];
}
+ (DenseNodes_Builder*) builderWithPrototype:(DenseNodes*) prototype {
  return [[DenseNodes builder] mergeFrom:prototype];
}
- (DenseNodes_Builder*) builder {
  return [DenseNodes builder];
}
@end

@interface DenseNodes_Builder()
@property (retain) DenseNodes* result;
@end

@implementation DenseNodes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DenseNodes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DenseNodes_Builder*) clear {
  self.result = [[[DenseNodes alloc] init] autorelease];
  return self;
}
- (DenseNodes_Builder*) clone {
  return [DenseNodes builderWithPrototype:result];
}
- (DenseNodes*) defaultInstance {
  return [DenseNodes defaultInstance];
}
- (DenseNodes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DenseNodes*) buildPartial {
  DenseNodes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DenseNodes_Builder*) mergeFrom:(DenseNodes*) other {
  if (other == [DenseNodes defaultInstance]) {
    return self;
  }
  if (other.mutableIdList.count > 0) {
    if (result.mutableIdList == nil) {
      result.mutableIdList = [NSMutableArray array];
    }
    [result.mutableIdList addObjectsFromArray:other.mutableIdList];
  }
  if (other.hasDenseinfo) {
    [self mergeDenseinfo:other.denseinfo];
  }
  if (other.mutableLatList.count > 0) {
    if (result.mutableLatList == nil) {
      result.mutableLatList = [NSMutableArray array];
    }
    [result.mutableLatList addObjectsFromArray:other.mutableLatList];
  }
  if (other.mutableLonList.count > 0) {
    if (result.mutableLonList == nil) {
      result.mutableLonList = [NSMutableArray array];
    }
    [result.mutableLonList addObjectsFromArray:other.mutableLonList];
  }
  if (other.mutableKeysValsList.count > 0) {
    if (result.mutableKeysValsList == nil) {
      result.mutableKeysValsList = [NSMutableArray array];
    }
    [result.mutableKeysValsList addObjectsFromArray:other.mutableKeysValsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DenseNodes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DenseNodes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addId:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 42: {
        DenseInfo_Builder* subBuilder = [DenseInfo builder];
        if (self.hasDenseinfo) {
          [subBuilder mergeFrom:self.denseinfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDenseinfo:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addLat:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 74: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addLon:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 82: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addKeysVals:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (NSArray*) idList {
  if (result.mutableIdList == nil) {
    return [NSArray array];
  }
  return result.mutableIdList;
}
- (int64_t) idAtIndex:(int32_t) index {
  return [result idAtIndex:index];
}
- (DenseNodes_Builder*) replaceIdAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableIdList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseNodes_Builder*) addId:(int64_t) value {
  if (result.mutableIdList == nil) {
    result.mutableIdList = [NSMutableArray array];
  }
  [result.mutableIdList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseNodes_Builder*) addAllId:(NSArray*) values {
  if (result.mutableIdList == nil) {
    result.mutableIdList = [NSMutableArray array];
  }
  [result.mutableIdList addObjectsFromArray:values];
  return self;
}
- (DenseNodes_Builder*) clearIdList {
  result.mutableIdList = nil;
  return self;
}
- (BOOL) hasDenseinfo {
  return result.hasDenseinfo;
}
- (DenseInfo*) denseinfo {
  return result.denseinfo;
}
- (DenseNodes_Builder*) setDenseinfo:(DenseInfo*) value {
  result.hasDenseinfo = YES;
  result.denseinfo = value;
  return self;
}
- (DenseNodes_Builder*) setDenseinfoBuilder:(DenseInfo_Builder*) builderForValue {
  return [self setDenseinfo:[builderForValue build]];
}
- (DenseNodes_Builder*) mergeDenseinfo:(DenseInfo*) value {
  if (result.hasDenseinfo &&
      result.denseinfo != [DenseInfo defaultInstance]) {
    result.denseinfo =
      [[[DenseInfo builderWithPrototype:result.denseinfo] mergeFrom:value] buildPartial];
  } else {
    result.denseinfo = value;
  }
  result.hasDenseinfo = YES;
  return self;
}
- (DenseNodes_Builder*) clearDenseinfo {
  result.hasDenseinfo = NO;
  result.denseinfo = [DenseInfo defaultInstance];
  return self;
}
- (NSArray*) latList {
  if (result.mutableLatList == nil) {
    return [NSArray array];
  }
  return result.mutableLatList;
}
- (int64_t) latAtIndex:(int32_t) index {
  return [result latAtIndex:index];
}
- (DenseNodes_Builder*) replaceLatAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableLatList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseNodes_Builder*) addLat:(int64_t) value {
  if (result.mutableLatList == nil) {
    result.mutableLatList = [NSMutableArray array];
  }
  [result.mutableLatList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseNodes_Builder*) addAllLat:(NSArray*) values {
  if (result.mutableLatList == nil) {
    result.mutableLatList = [NSMutableArray array];
  }
  [result.mutableLatList addObjectsFromArray:values];
  return self;
}
- (DenseNodes_Builder*) clearLatList {
  result.mutableLatList = nil;
  return self;
}
- (NSArray*) lonList {
  if (result.mutableLonList == nil) {
    return [NSArray array];
  }
  return result.mutableLonList;
}
- (int64_t) lonAtIndex:(int32_t) index {
  return [result lonAtIndex:index];
}
- (DenseNodes_Builder*) replaceLonAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableLonList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseNodes_Builder*) addLon:(int64_t) value {
  if (result.mutableLonList == nil) {
    result.mutableLonList = [NSMutableArray array];
  }
  [result.mutableLonList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (DenseNodes_Builder*) addAllLon:(NSArray*) values {
  if (result.mutableLonList == nil) {
    result.mutableLonList = [NSMutableArray array];
  }
  [result.mutableLonList addObjectsFromArray:values];
  return self;
}
- (DenseNodes_Builder*) clearLonList {
  result.mutableLonList = nil;
  return self;
}
- (NSArray*) keysValsList {
  if (result.mutableKeysValsList == nil) {
    return [NSArray array];
  }
  return result.mutableKeysValsList;
}
- (int32_t) keysValsAtIndex:(int32_t) index {
  return [result keysValsAtIndex:index];
}
- (DenseNodes_Builder*) replaceKeysValsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableKeysValsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseNodes_Builder*) addKeysVals:(int32_t) value {
  if (result.mutableKeysValsList == nil) {
    result.mutableKeysValsList = [NSMutableArray array];
  }
  [result.mutableKeysValsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (DenseNodes_Builder*) addAllKeysVals:(NSArray*) values {
  if (result.mutableKeysValsList == nil) {
    result.mutableKeysValsList = [NSMutableArray array];
  }
  [result.mutableKeysValsList addObjectsFromArray:values];
  return self;
}
- (DenseNodes_Builder*) clearKeysValsList {
  result.mutableKeysValsList = nil;
  return self;
}
@end

@interface Way ()
@property int64_t id;
@property (retain) NSMutableArray* mutableKeysList;
@property (retain) NSMutableArray* mutableValsList;
@property (retain) Info* info;
@property (retain) NSMutableArray* mutableRefsList;
@end

@implementation Way

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
@synthesize mutableKeysList;
@synthesize mutableValsList;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) value {
  hasInfo_ = !!value;
}
@synthesize info;
@synthesize mutableRefsList;
- (void) dealloc {
  self.mutableKeysList = nil;
  self.mutableValsList = nil;
  self.info = nil;
  self.mutableRefsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.info = [Info defaultInstance];
  }
  return self;
}
static Way* defaultWayInstance = nil;
+ (void) initialize {
  if (self == [Way class]) {
    defaultWayInstance = [[Way alloc] init];
  }
}
+ (Way*) defaultInstance {
  return defaultWayInstance;
}
- (Way*) defaultInstance {
  return defaultWayInstance;
}
- (NSArray*) keysList {
  return mutableKeysList;
}
- (int32_t) keysAtIndex:(int32_t) index {
  id value = [mutableKeysList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) valsList {
  return mutableValsList;
}
- (int32_t) valsAtIndex:(int32_t) index {
  id value = [mutableValsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) refsList {
  return mutableRefsList;
}
- (int64_t) refsAtIndex:(int32_t) index {
  id value = [mutableRefsList objectAtIndex:index];
  return [value longLongValue];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.mutableKeysList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:keysMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableKeysList) {
    [output writeUInt32NoTag:[value intValue]];
  }
  if (self.mutableValsList.count > 0) {
    [output writeRawVarint32:26];
    [output writeRawVarint32:valsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableValsList) {
    [output writeUInt32NoTag:[value intValue]];
  }
  if (self.hasInfo) {
    [output writeMessage:4 value:self.info];
  }
  if (self.mutableRefsList.count > 0) {
    [output writeRawVarint32:66];
    [output writeRawVarint32:refsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableRefsList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt64Size(1, self.id);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableKeysList) {
      dataSize += computeUInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableKeysList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    keysMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableValsList) {
      dataSize += computeUInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableValsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    valsMemoizedSerializedSize = dataSize;
  }
  if (self.hasInfo) {
    size += computeMessageSize(4, self.info);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableRefsList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableRefsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    refsMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Way*) parseFromData:(NSData*) data {
  return (Way*)[[[Way builder] mergeFromData:data] build];
}
+ (Way*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Way*)[[[Way builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Way*) parseFromInputStream:(NSInputStream*) input {
  return (Way*)[[[Way builder] mergeFromInputStream:input] build];
}
+ (Way*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Way*)[[[Way builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Way*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Way*)[[[Way builder] mergeFromCodedInputStream:input] build];
}
+ (Way*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Way*)[[[Way builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Way_Builder*) builder {
  return [[[Way_Builder alloc] init] autorelease];
}
+ (Way_Builder*) builderWithPrototype:(Way*) prototype {
  return [[Way builder] mergeFrom:prototype];
}
- (Way_Builder*) builder {
  return [Way builder];
}
@end

@interface Way_Builder()
@property (retain) Way* result;
@end

@implementation Way_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Way alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Way_Builder*) clear {
  self.result = [[[Way alloc] init] autorelease];
  return self;
}
- (Way_Builder*) clone {
  return [Way builderWithPrototype:result];
}
- (Way*) defaultInstance {
  return [Way defaultInstance];
}
- (Way*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Way*) buildPartial {
  Way* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Way_Builder*) mergeFrom:(Way*) other {
  if (other == [Way defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.mutableKeysList.count > 0) {
    if (result.mutableKeysList == nil) {
      result.mutableKeysList = [NSMutableArray array];
    }
    [result.mutableKeysList addObjectsFromArray:other.mutableKeysList];
  }
  if (other.mutableValsList.count > 0) {
    if (result.mutableValsList == nil) {
      result.mutableValsList = [NSMutableArray array];
    }
    [result.mutableValsList addObjectsFromArray:other.mutableValsList];
  }
  if (other.hasInfo) {
    [self mergeInfo:other.info];
  }
  if (other.mutableRefsList.count > 0) {
    if (result.mutableRefsList == nil) {
      result.mutableRefsList = [NSMutableArray array];
    }
    [result.mutableRefsList addObjectsFromArray:other.mutableRefsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Way_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Way_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addKeys:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 26: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addVals:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 34: {
        Info_Builder* subBuilder = [Info builder];
        if (self.hasInfo) {
          [subBuilder mergeFrom:self.info];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInfo:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addRefs:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int64_t) id {
  return result.id;
}
- (Way_Builder*) setId:(int64_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Way_Builder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (NSArray*) keysList {
  if (result.mutableKeysList == nil) {
    return [NSArray array];
  }
  return result.mutableKeysList;
}
- (int32_t) keysAtIndex:(int32_t) index {
  return [result keysAtIndex:index];
}
- (Way_Builder*) replaceKeysAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableKeysList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Way_Builder*) addKeys:(int32_t) value {
  if (result.mutableKeysList == nil) {
    result.mutableKeysList = [NSMutableArray array];
  }
  [result.mutableKeysList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Way_Builder*) addAllKeys:(NSArray*) values {
  if (result.mutableKeysList == nil) {
    result.mutableKeysList = [NSMutableArray array];
  }
  [result.mutableKeysList addObjectsFromArray:values];
  return self;
}
- (Way_Builder*) clearKeysList {
  result.mutableKeysList = nil;
  return self;
}
- (NSArray*) valsList {
  if (result.mutableValsList == nil) {
    return [NSArray array];
  }
  return result.mutableValsList;
}
- (int32_t) valsAtIndex:(int32_t) index {
  return [result valsAtIndex:index];
}
- (Way_Builder*) replaceValsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableValsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Way_Builder*) addVals:(int32_t) value {
  if (result.mutableValsList == nil) {
    result.mutableValsList = [NSMutableArray array];
  }
  [result.mutableValsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Way_Builder*) addAllVals:(NSArray*) values {
  if (result.mutableValsList == nil) {
    result.mutableValsList = [NSMutableArray array];
  }
  [result.mutableValsList addObjectsFromArray:values];
  return self;
}
- (Way_Builder*) clearValsList {
  result.mutableValsList = nil;
  return self;
}
- (BOOL) hasInfo {
  return result.hasInfo;
}
- (Info*) info {
  return result.info;
}
- (Way_Builder*) setInfo:(Info*) value {
  result.hasInfo = YES;
  result.info = value;
  return self;
}
- (Way_Builder*) setInfoBuilder:(Info_Builder*) builderForValue {
  return [self setInfo:[builderForValue build]];
}
- (Way_Builder*) mergeInfo:(Info*) value {
  if (result.hasInfo &&
      result.info != [Info defaultInstance]) {
    result.info =
      [[[Info builderWithPrototype:result.info] mergeFrom:value] buildPartial];
  } else {
    result.info = value;
  }
  result.hasInfo = YES;
  return self;
}
- (Way_Builder*) clearInfo {
  result.hasInfo = NO;
  result.info = [Info defaultInstance];
  return self;
}
- (NSArray*) refsList {
  if (result.mutableRefsList == nil) {
    return [NSArray array];
  }
  return result.mutableRefsList;
}
- (int64_t) refsAtIndex:(int32_t) index {
  return [result refsAtIndex:index];
}
- (Way_Builder*) replaceRefsAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableRefsList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (Way_Builder*) addRefs:(int64_t) value {
  if (result.mutableRefsList == nil) {
    result.mutableRefsList = [NSMutableArray array];
  }
  [result.mutableRefsList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (Way_Builder*) addAllRefs:(NSArray*) values {
  if (result.mutableRefsList == nil) {
    result.mutableRefsList = [NSMutableArray array];
  }
  [result.mutableRefsList addObjectsFromArray:values];
  return self;
}
- (Way_Builder*) clearRefsList {
  result.mutableRefsList = nil;
  return self;
}
@end

@interface Relation ()
@property int64_t id;
@property (retain) NSMutableArray* mutableKeysList;
@property (retain) NSMutableArray* mutableValsList;
@property (retain) Info* info;
@property (retain) NSMutableArray* mutableRolesSidList;
@property (retain) NSMutableArray* mutableMemidsList;
@property (retain) NSMutableArray* mutableTypesList;
@end

@implementation Relation

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
@synthesize mutableKeysList;
@synthesize mutableValsList;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) value {
  hasInfo_ = !!value;
}
@synthesize info;
@synthesize mutableRolesSidList;
@synthesize mutableMemidsList;
@synthesize mutableTypesList;
- (void) dealloc {
  self.mutableKeysList = nil;
  self.mutableValsList = nil;
  self.info = nil;
  self.mutableRolesSidList = nil;
  self.mutableMemidsList = nil;
  self.mutableTypesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.info = [Info defaultInstance];
  }
  return self;
}
static Relation* defaultRelationInstance = nil;
+ (void) initialize {
  if (self == [Relation class]) {
    defaultRelationInstance = [[Relation alloc] init];
  }
}
+ (Relation*) defaultInstance {
  return defaultRelationInstance;
}
- (Relation*) defaultInstance {
  return defaultRelationInstance;
}
- (NSArray*) keysList {
  return mutableKeysList;
}
- (int32_t) keysAtIndex:(int32_t) index {
  id value = [mutableKeysList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) valsList {
  return mutableValsList;
}
- (int32_t) valsAtIndex:(int32_t) index {
  id value = [mutableValsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) rolesSidList {
  return mutableRolesSidList;
}
- (int32_t) rolesSidAtIndex:(int32_t) index {
  id value = [mutableRolesSidList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) memidsList {
  return mutableMemidsList;
}
- (int64_t) memidsAtIndex:(int32_t) index {
  id value = [mutableMemidsList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) typesList {
  return mutableTypesList;
}
- (Relation_MemberType) typesAtIndex:(int32_t) index {
  NSNumber* value = [mutableTypesList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.mutableKeysList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:keysMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableKeysList) {
    [output writeUInt32NoTag:[value intValue]];
  }
  if (self.mutableValsList.count > 0) {
    [output writeRawVarint32:26];
    [output writeRawVarint32:valsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableValsList) {
    [output writeUInt32NoTag:[value intValue]];
  }
  if (self.hasInfo) {
    [output writeMessage:4 value:self.info];
  }
  if (self.mutableRolesSidList.count > 0) {
    [output writeRawVarint32:66];
    [output writeRawVarint32:rolesSidMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableRolesSidList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.mutableMemidsList.count > 0) {
    [output writeRawVarint32:74];
    [output writeRawVarint32:memidsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableMemidsList) {
    [output writeSInt64NoTag:[value longLongValue]];
  }
  if (self.typesList.count > 0) {
    [output writeRawVarint32:82];
    [output writeRawVarint32:typesMemoizedSerializedSize];
  }
  for (NSNumber* element in self.typesList) {
    [output writeEnumNoTag:element.intValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt64Size(1, self.id);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableKeysList) {
      dataSize += computeUInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableKeysList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    keysMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableValsList) {
      dataSize += computeUInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableValsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    valsMemoizedSerializedSize = dataSize;
  }
  if (self.hasInfo) {
    size += computeMessageSize(4, self.info);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableRolesSidList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableRolesSidList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    rolesSidMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableMemidsList) {
      dataSize += computeSInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    if (self.mutableMemidsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    memidsMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* element in self.typesList) {
      dataSize += computeEnumSizeNoTag(element.intValue);
    }
    size += dataSize;
    if (self.typesList.count > 0) {
      size += 1;
      size += computeRawVarint32Size(dataSize);
    }
    typesMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Relation*) parseFromData:(NSData*) data {
  return (Relation*)[[[Relation builder] mergeFromData:data] build];
}
+ (Relation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Relation*)[[[Relation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Relation*) parseFromInputStream:(NSInputStream*) input {
  return (Relation*)[[[Relation builder] mergeFromInputStream:input] build];
}
+ (Relation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Relation*)[[[Relation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Relation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Relation*)[[[Relation builder] mergeFromCodedInputStream:input] build];
}
+ (Relation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Relation*)[[[Relation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Relation_Builder*) builder {
  return [[[Relation_Builder alloc] init] autorelease];
}
+ (Relation_Builder*) builderWithPrototype:(Relation*) prototype {
  return [[Relation builder] mergeFrom:prototype];
}
- (Relation_Builder*) builder {
  return [Relation builder];
}
@end

BOOL Relation_MemberTypeIsValidValue(Relation_MemberType value) {
  switch (value) {
    case Relation_MemberTypeNode:
    case Relation_MemberTypeWay:
    case Relation_MemberTypeRelation:
      return YES;
    default:
      return NO;
  }
}
@interface Relation_Builder()
@property (retain) Relation* result;
@end

@implementation Relation_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Relation alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Relation_Builder*) clear {
  self.result = [[[Relation alloc] init] autorelease];
  return self;
}
- (Relation_Builder*) clone {
  return [Relation builderWithPrototype:result];
}
- (Relation*) defaultInstance {
  return [Relation defaultInstance];
}
- (Relation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Relation*) buildPartial {
  Relation* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Relation_Builder*) mergeFrom:(Relation*) other {
  if (other == [Relation defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.mutableKeysList.count > 0) {
    if (result.mutableKeysList == nil) {
      result.mutableKeysList = [NSMutableArray array];
    }
    [result.mutableKeysList addObjectsFromArray:other.mutableKeysList];
  }
  if (other.mutableValsList.count > 0) {
    if (result.mutableValsList == nil) {
      result.mutableValsList = [NSMutableArray array];
    }
    [result.mutableValsList addObjectsFromArray:other.mutableValsList];
  }
  if (other.hasInfo) {
    [self mergeInfo:other.info];
  }
  if (other.mutableRolesSidList.count > 0) {
    if (result.mutableRolesSidList == nil) {
      result.mutableRolesSidList = [NSMutableArray array];
    }
    [result.mutableRolesSidList addObjectsFromArray:other.mutableRolesSidList];
  }
  if (other.mutableMemidsList.count > 0) {
    if (result.mutableMemidsList == nil) {
      result.mutableMemidsList = [NSMutableArray array];
    }
    [result.mutableMemidsList addObjectsFromArray:other.mutableMemidsList];
  }
  if (other.mutableTypesList.count > 0) {
    if (result.mutableTypesList == nil) {
      result.mutableTypesList = [NSMutableArray array];
    }
    [result.mutableTypesList addObjectsFromArray:other.mutableTypesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Relation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Relation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addKeys:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 26: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addVals:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 34: {
        Info_Builder* subBuilder = [Info builder];
        if (self.hasInfo) {
          [subBuilder mergeFrom:self.info];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInfo:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addRolesSid:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 74: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addMemids:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 82: {
        int32_t length = [input readRawVarint32];
        int32_t oldLimit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          int32_t value = [input readEnum];
          if (Relation_MemberTypeIsValidValue(value)) {
            [self addTypes:value];
          } else {
            [unknownFields mergeVarintField:10 value:value];
          }
        }
        [input popLimit:oldLimit];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int64_t) id {
  return result.id;
}
- (Relation_Builder*) setId:(int64_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Relation_Builder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (NSArray*) keysList {
  if (result.mutableKeysList == nil) {
    return [NSArray array];
  }
  return result.mutableKeysList;
}
- (int32_t) keysAtIndex:(int32_t) index {
  return [result keysAtIndex:index];
}
- (Relation_Builder*) replaceKeysAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableKeysList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addKeys:(int32_t) value {
  if (result.mutableKeysList == nil) {
    result.mutableKeysList = [NSMutableArray array];
  }
  [result.mutableKeysList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addAllKeys:(NSArray*) values {
  if (result.mutableKeysList == nil) {
    result.mutableKeysList = [NSMutableArray array];
  }
  [result.mutableKeysList addObjectsFromArray:values];
  return self;
}
- (Relation_Builder*) clearKeysList {
  result.mutableKeysList = nil;
  return self;
}
- (NSArray*) valsList {
  if (result.mutableValsList == nil) {
    return [NSArray array];
  }
  return result.mutableValsList;
}
- (int32_t) valsAtIndex:(int32_t) index {
  return [result valsAtIndex:index];
}
- (Relation_Builder*) replaceValsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableValsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addVals:(int32_t) value {
  if (result.mutableValsList == nil) {
    result.mutableValsList = [NSMutableArray array];
  }
  [result.mutableValsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addAllVals:(NSArray*) values {
  if (result.mutableValsList == nil) {
    result.mutableValsList = [NSMutableArray array];
  }
  [result.mutableValsList addObjectsFromArray:values];
  return self;
}
- (Relation_Builder*) clearValsList {
  result.mutableValsList = nil;
  return self;
}
- (BOOL) hasInfo {
  return result.hasInfo;
}
- (Info*) info {
  return result.info;
}
- (Relation_Builder*) setInfo:(Info*) value {
  result.hasInfo = YES;
  result.info = value;
  return self;
}
- (Relation_Builder*) setInfoBuilder:(Info_Builder*) builderForValue {
  return [self setInfo:[builderForValue build]];
}
- (Relation_Builder*) mergeInfo:(Info*) value {
  if (result.hasInfo &&
      result.info != [Info defaultInstance]) {
    result.info =
      [[[Info builderWithPrototype:result.info] mergeFrom:value] buildPartial];
  } else {
    result.info = value;
  }
  result.hasInfo = YES;
  return self;
}
- (Relation_Builder*) clearInfo {
  result.hasInfo = NO;
  result.info = [Info defaultInstance];
  return self;
}
- (NSArray*) rolesSidList {
  if (result.mutableRolesSidList == nil) {
    return [NSArray array];
  }
  return result.mutableRolesSidList;
}
- (int32_t) rolesSidAtIndex:(int32_t) index {
  return [result rolesSidAtIndex:index];
}
- (Relation_Builder*) replaceRolesSidAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableRolesSidList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addRolesSid:(int32_t) value {
  if (result.mutableRolesSidList == nil) {
    result.mutableRolesSidList = [NSMutableArray array];
  }
  [result.mutableRolesSidList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addAllRolesSid:(NSArray*) values {
  if (result.mutableRolesSidList == nil) {
    result.mutableRolesSidList = [NSMutableArray array];
  }
  [result.mutableRolesSidList addObjectsFromArray:values];
  return self;
}
- (Relation_Builder*) clearRolesSidList {
  result.mutableRolesSidList = nil;
  return self;
}
- (NSArray*) memidsList {
  if (result.mutableMemidsList == nil) {
    return [NSArray array];
  }
  return result.mutableMemidsList;
}
- (int64_t) memidsAtIndex:(int32_t) index {
  return [result memidsAtIndex:index];
}
- (Relation_Builder*) replaceMemidsAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableMemidsList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (Relation_Builder*) addMemids:(int64_t) value {
  if (result.mutableMemidsList == nil) {
    result.mutableMemidsList = [NSMutableArray array];
  }
  [result.mutableMemidsList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (Relation_Builder*) addAllMemids:(NSArray*) values {
  if (result.mutableMemidsList == nil) {
    result.mutableMemidsList = [NSMutableArray array];
  }
  [result.mutableMemidsList addObjectsFromArray:values];
  return self;
}
- (Relation_Builder*) clearMemidsList {
  result.mutableMemidsList = nil;
  return self;
}
- (NSArray*) typesList {
  return result.mutableTypesList;
}
- (Relation_MemberType) typesAtIndex:(int32_t) index {
  return [result typesAtIndex:index];
}
- (Relation_Builder*) replaceTypesAtIndex:(int32_t) index with:(Relation_MemberType) value {
  [result.mutableTypesList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addTypes:(Relation_MemberType) value {
  if (result.mutableTypesList == nil) {
    result.mutableTypesList = [NSMutableArray array];
  }
  [result.mutableTypesList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (Relation_Builder*) addAllTypes:(NSArray*) values {
  if (result.mutableTypesList == nil) {
    result.mutableTypesList = [NSMutableArray array];
  }
  [result.mutableTypesList addObjectsFromArray:values];
  return self;
}
- (Relation_Builder*) clearTypesList {
  result.mutableTypesList = nil;
  return self;
}
@end

